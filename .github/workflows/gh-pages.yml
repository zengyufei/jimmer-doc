name: Deploy
on:
  workflow_dispatch: {}
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
# 声明需要上传权限
permissions:
  contents: write
  actions: read
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
          
      - name: Cache node yarn
        id: cache-yarn
        uses: actions/cache@v3
        env:
          cache-name: cache-node-yarn
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ steps.yarn-cache-dir-path.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ steps.yarn-cache-dir-path.outputs.version }}
          
      - name: Cache node modules
        id: cache-modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


      - if: ${{ steps.cache-yarn.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: |
          ls /home/runner/.cache
          ls /home/runner/.cache/yarn
          ls /home/runner/.cache/yarn/v6
          
      - if: ${{ steps.cache-yarn.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: |
          pwd
          yarn -v
          yarn cache dir
      
      - if: ${{ steps.cache-modules.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: yarn install
        
      - run: yarn build
            
      - name: Rename Build
        run: |
          ls
          echo "==========================="
          mv ./build ./jimmer-doc
          echo "==========================="
          ls
          
      - name: Zip
        run: |
          zip -r jimmer-doc.zip ./jimmer-doc/*
          ls
                
      - name: Get release asset ID
        id: get_asset_id
        run: |
          TAG_NAME=release
          ASSET_NAME="jimmer-doc.zip"
          ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | \
            jq -r ".assets[] | select(.name == \"$ASSET_NAME\") | .id")
          
          echo "ASSET_ID=$ASSET_ID" >> $GITHUB_ENV
          echo "Found asset ID: $ASSET_ID"

      - name: Delete old release asset
        if: env.ASSET_ID != ''
        run: |
          echo "Deleting asset with ID: $ASSET_ID"
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
            
      - name: Upload to Release
        if: success()
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./jimmer-doc.zip
          asset_name: jimmer-doc.zip
          tag: release
