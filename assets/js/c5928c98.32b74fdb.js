"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8562],{41143:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"mapping/advanced/view/many-to-many-view","title":"ManyToManyView","description":"Limitations of classic ORM associations","source":"@site/docs/mapping/advanced/view/many-to-many-view.mdx","sourceDirName":"mapping/advanced/view","slug":"/mapping/advanced/view/many-to-many-view","permalink":"/jimmer-doc/docs/mapping/advanced/view/many-to-many-view","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mapping/advanced/view/many-to-many-view.mdx","tags":[],"version":"current","lastUpdatedAt":1704015848000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"ManyToManyView"},"sidebar":"tutorialSidebar","previous":{"title":"IdView","permalink":"/jimmer-doc/docs/mapping/advanced/view/id-view"},"next":{"title":"Calculated Properties","permalink":"/jimmer-doc/docs/mapping/advanced/calculated/"}}');var a=i(74848),s=i(28453),r=i(11470),o=i(19365);const l={sidebar_position:1,title:"ManyToManyView"},d=void 0,c={},h=[{value:"Limitations of classic ORM associations",id:"limitations-of-classic-orm-associations",level:2},{value:"Undisputed many-to-many association",id:"undisputed-many-to-many-association",level:3},{value:"Undisputed double many-to-one association",id:"undisputed-double-many-to-one-association",level:3},{value:"The controversial, tangled scenario",id:"the-controversial-tangled-scenario",level:3},{value:"Getting Started with ManyToManyView",id:"getting-started-with-manytomanyview",level:2},{value:"Basic relationship mapping",id:"basic-relationship-mapping",level:3},{value:"Using @ManyToManyView",id:"using-manytomanyview",level:3},{value:"The essence of @ManyToManyView",id:"the-essence-of-manytomanyview",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"limitations-of-classic-orm-associations",children:"Limitations of classic ORM associations"}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.a,{href:"../../base/association",children:"Basic Mapping/Associative Mapping"}),", we learned about the classic associative mappings in ORM, including one-to-one, many-to-one, one-to-many and many-to-many."]}),"\n",(0,a.jsx)(n.p,{children:"However, there is one scenario that makes the choice of mapping mode very tangled. To show this scenario, let's start with a familiar scenario."}),"\n",(0,a.jsx)(n.h3,{id:"undisputed-many-to-many-association",children:"Undisputed many-to-many association"}),"\n",(0,a.jsx)(n.p,{children:"Let's look at a piece of DDL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"create table book(\n    ...omit...\n)engine=innodb;;\n\ncreate table author(\n    ...omit...  \n) engine=innodb;\n\n/* highlight-next-line */\ncreate table book_author_mapping(\n    book_id bigint unsigned not null,\n    author_id bigint unsigned not null\n) engine=innodb;\nalter table book_author_mapping\n    add constraint pk_book_author_mapping\n        primary key(book_id, author_id)\n;\nalter table book_author_mapping\n    add constraint fk_book_author_mapping__book\n        foreign key(book_id)\n            references book(id)\n                on delete cascade\n;\nalter table book_author_mapping\n    add constraint fk_book_author_mapping__author\n        foreign key(author_id)\n            references author(id)\n                on delete cascade\n;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In this piece of DDL, ",(0,a.jsx)(n.code,{children:"book_author_mapping"})," table is very special, it only has two foreign keys, one pointing to ",(0,a.jsx)(n.code,{children:"book"})," table, and one pointing to ",(0,a.jsx)(n.code,{children:"author"})," table. This kind of subtable with only two foreign keys is used to express the many-to-many association between two parent tables."]}),"\n",(0,a.jsx)(n.p,{children:"ORM's many-to-many mapping will hide the intermediate table, that is, the intermediate table does not correspond to a Java/Kotlin entity type. Therefore, the intermediate table does not need an independent primary key, but directly uses the two foreign keys as a combined primary key."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"In addition to the two associative foreign keys, the intermediate table must not have any other fields, which is a limitation of many-to-many associations in ORM."})}),"\n",(0,a.jsx)(n.p,{children:"The corresponding many-to-many association in ORM is as follows:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Owning side: ",(0,a.jsx)(n.code,{children:"Book.authors"})]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Book.java" ',children:"@Entity\npublic interface Book {\n\n    @ManyToMany\n    List<Author> authors();\n\n    ...other code omitted...\n}\n"})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"@Entity\ninterface Book {\n\n    @ManyToMany\n    val authors: List<Author>\n\n    ...other code omitted...\n}\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Inverse side ",(0,a.jsx)(n.em,{children:"(optional)"}),": ",(0,a.jsx)(n.code,{children:"Author.books"})]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Author.java"',children:'@Entity\npublic interface Author {\n\n    @ManyToMany(mappedBy = "authors")\n    List<Book> books();\n\n    ...other code omitted...\n}\n'})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Author.kt"',children:'@Entity\ninterface Author {\n\n    @ManyToMany(mappedBy = "authors")\n    val books: List<Book>\n\n    ...other code omitted...\n}\n'})})})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"undisputed-double-many-to-one-association",children:"Undisputed double many-to-one association"}),"\n",(0,a.jsx)(n.p,{children:"Let's look at the second scenario, first, look at a piece of DDL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"create table order_(\n    ...omit...\n) engine=innodb;\n\ncreate table product(\n    ...omit...\n) engine=innodb;\n\n/* highlight-next-line */\ncreate table order_item(\n    id bigint unsigned not null auto_increment primary key, \n    order_id bigint unsigned not null,\n    product_id bigint unsigned not null,\n    /* highlight-next-line */\n    quantity int not null,\n    /* highlight-next-line */  \n    unit_price numeric(10, 2) not null\n) engine=innodb;\nalter table order_item\n    add constraint business_key_order_item\n        unique(order_id, product_id)\n;\nalter table order_item\n    add constraint fk_order_item__order\n        foreign key(order_id)\n            references order_(id)\n;\nalter table order_item\n    add constraint fk_order_item__product\n        foreign key(product_id)\n            references product(id)\n;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This is a classic ",(0,a.jsx)(n.code,{children:"order - order item - product"})," association."]}),"\n",(0,a.jsxs)(n.p,{children:["Among them, ",(0,a.jsx)(n.code,{children:"order-item"})," looks a bit like the intermediate table of many-to-many, because it has two foreign keys: ",(0,a.jsx)(n.code,{children:"order_id"})," pointing to the ",(0,a.jsx)(n.code,{children:"order_"})," table and ",(0,a.jsx)(n.code,{children:"product_id"})," pointing to the ",(0,a.jsx)(n.code,{children:"product"})," table."]}),"\n",(0,a.jsxs)(n.p,{children:["However, ",(0,a.jsx)(n.code,{children:"order-item"})," is not an intermediate table, because it has other business fields, ",(0,a.jsx)(n.code,{children:"quantity"})," representing quantity of goods, and ",(0,a.jsx)(n.code,{children:"unit_price"})," representing a snapshot of the price of goods at the time of order."]}),"\n",(0,a.jsxs)(n.p,{children:["Fortunately, for the classic ",(0,a.jsx)(n.code,{children:"order - order item - product"})," association, it is more intuitive to think of ",(0,a.jsx)(n.code,{children:"order_item"})," as an independent entity, with two many-to-one associations pointing to ",(0,a.jsx)(n.code,{children:"order_"})," and ",(0,a.jsx)(n.code,{children:"product"})," respectively;\nRather than viewing ",(0,a.jsx)(n.code,{children:"order-item"})," as a join table and thinking there is a many-to-many relationship between ",(0,a.jsx)(n.code,{children:"order_"})," and ",(0,a.jsx)(n.code,{children:"product"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["It is precisely because ",(0,a.jsx)(n.code,{children:"order_item"})," is regarded as an independent entity that ",(0,a.jsx)(n.code,{children:"order_item"})," uses an independent primary key."]}),"\n",(0,a.jsx)(n.p,{children:"We can map these three tables in ORM using two many-to-one associations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"OrderItem.order"})," and ",(0,a.jsx)(n.code,{children:"OrderItem.product"})]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="OrderItem.java"',children:"@Entity\npublic interface OrderItem {\n\n    @ManyToOne\n    // highlight-next-line\n    Order order();\n\n    @ManyToOne\n    // highlight-next-line\n    Product product();\n\n    int quantity();\n\n    BigDecimal unitPrice();\n\n    ...other code omitted...\n}\n"})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="OrderItem.kt"',children:"@Entity\ninterface OrderItem {\n\n    @ManyToOne\n    // highlight-next-line\n    val order: Order\n\n    @ManyToOne\n    // highlight-next-line\n    val product: Product\n\n    val quantity: Int\n\n    val unitPrice: BigDecimal\n\n    ...other code omitted...\n}\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Order.items"})}),"\n",(0,a.jsxs)(n.p,{children:["In such systems, it is often necessary to get the detail list according to the order, so we define a one-to-many property ",(0,a.jsx)(n.code,{children:"Order.items"})," as a mirror of ",(0,a.jsx)(n.code,{children:"OrderItem.order"}),"."]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Order.java"',children:'@Entity\n@Table(name = "ORDER_")\npublic interface Order {\n\n    @OneToMany(mappedBy = "order")\n    List<OrderItem> items();\n\n    ...other code omitted...\n}\n'})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Order.kt"',children:'@Entity\n@Table(name = "ORDER_")\ninterface Order {\n\n    @OneToMany(mappedBy = "order")\n    val items: List<OrderItem>\n\n    ...other code omitted...\n}\n'})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Do not provide ",(0,a.jsx)(n.code,{children:"Product.items"})]}),"\n",(0,a.jsxs)(n.p,{children:["In such systems, it is rarely necessary to get the detail list based on the product ",(0,a.jsx)(n.em,{children:"(if starting the analysis from the product side, it is usually a complex query rather than a simple association)"}),", so a one-way ",(0,a.jsx)(n.code,{children:"OrderItem.product"})," association is sufficient."]}),"\n",(0,a.jsxs)(n.p,{children:["So there is no need to show the code for the ",(0,a.jsx)(n.code,{children:"Product"})," entity."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"the-controversial-tangled-scenario",children:"The controversial, tangled scenario"}),"\n",(0,a.jsx)(n.p,{children:"In the previous text, we showed two business scenarios"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Scenario 1: The intermediate table ",(0,a.jsx)(n.code,{children:"book_author_mapping"})," is very clean, with only two foreign key fields, and is naturally mapped to a many-to-many association"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Scenario 2: ",(0,a.jsx)(n.code,{children:"order_item"})," looks like an intermediate table but is not an intermediate table, because in addition to the two foreign keys it also needs to have other business fields.\nFortunately, people will choose to treat OrderItem as an independent entity and use two many-to-one associations to string the three entity types together."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Next, let's look at scenario 3, first look at the DDL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"create table student(\n    ...omit...\n)engine=innodb;;\n\ncreate table course(\n    ...omit...\n) engine=innodb;\n\n/* highlight-next-line */\ncreate table learning_link (\n    id bigint unsigned not null auto_increment primary key,\n    student_id bigint unsigned not null,\n    course_id bigint unsigned not null,\n    /* highlight-next-line */\n    score int\n) engine=innodb;\nalter table learning_link\n    add constraint pk_student_course_mapping\n        primary key(student_id, course_id)\n;\nalter table learning_link\n    add constraint fk_student_course_mapping__student\n        foreign key(student_id)\n            references student(id)\n                on delete cascade\n;\nalter table learning_link\n    add constraint fk_student_course_mapping__course\n        foreign key(course_id)\n            references course(id)\n                on delete cascade\n;\n"})}),"\n",(0,a.jsx)(n.p,{children:"This piece of DDL represents the elective course system in schools. There is a many-to-many relationship between students and elective courses."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"For students, it is of course very important to know which courses they have chosen"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"For schools, it is also very important to know which students have chosen each course, because teacher resources and teaching venues need to be arranged based on this information"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["That is, for the student entity and the course entity, associating with each other and querying each other is an important and high frequency operation. Therefore, abstracting bidirectional many-to-many associations between ",(0,a.jsx)(n.code,{children:"student"})," and ",(0,a.jsx)(n.code,{children:"course"})," is a very good choice."]}),"\n",(0,a.jsxs)(n.p,{children:["Unfortunately, the elective relationship table ",(0,a.jsx)(n.code,{children:"learning_link"})," has a ",(0,a.jsx)(n.code,{children:"score"})," field that can be null, null indicating that the exam has not yet taken place, non-null indicating the score after the exam."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Because of the existence of this field, the intermediate table is no longer clean, and cannot be simply mapped to the classic ORM many-to-many association. That is, this is not a simple scenario 1."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Of course, we can handle this problem using the method of scenario 2, treating ",(0,a.jsx)(n.code,{children:"learning_link"})," as an independent entity, and using two many-to-one associations to string the three entity types together."]}),"\n",(0,a.jsxs)(n.p,{children:["However, for a large part of the upper layer business, what they really care about is only the mutual association between ",(0,a.jsx)(n.code,{children:"student"})," and ",(0,a.jsx)(n.code,{children:"course"}),", and they don't care about the ",(0,a.jsx)(n.code,{children:"score"})," field of the ",(0,a.jsx)(n.code,{children:"learning_link"})," table.\n",(0,a.jsxs)(n.em,{children:["(That is, the non-foreign key business field ",(0,a.jsx)(n.code,{children:"learning_link"}),".",(0,a.jsx)(n.code,{children:"score"})," of the intermediate table is far less important than the relevant fields in scenario 2)"]}),".\nIn this case, scenario 2's solution will bring a higher cognitive burden, and scenario 1's way of thinking is obviously simpler."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{}),(0,a.jsx)(n.p,{children:"This scenario is actually the most tangled scenario in classic ORM, which cannot be simply mapped to many-to-many associations, while hoping that some upper layer business can adopt the many-to-many mentality to simplify the problem."}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"@ManyToManyView"})," is a powerful tool designed for such scenarios."]})]}),"\n",(0,a.jsx)(n.h2,{id:"getting-started-with-manytomanyview",children:"Getting Started with ManyToManyView"}),"\n",(0,a.jsx)(n.p,{children:"For the discussed scenario 3 above, Jimmer gave a two-step solution."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Basic association mapping:"}),"\n",(0,a.jsxs)(n.p,{children:["First, treat ",(0,a.jsx)(n.code,{children:"learning_link"})," as an independent entity according to scenario 2, and provide two many-to-one associations pointing to ",(0,a.jsx)(n.code,{children:"student"})," and ",(0,a.jsx)(n.code,{children:"course"})," respectively;\nConversely, ",(0,a.jsx)(n.code,{children:"student"})," and ",(0,a.jsx)(n.code,{children:"course"})," also use one-to-many associations to reference ",(0,a.jsx)(n.code,{children:"learning_link"}),". That is, use two bidirectional one-to-many associations to string the three entity types together."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"@ManyToManyView"}),":"]}),"\n",(0,a.jsxs)(n.p,{children:["Then, on the basis of the first step, use ",(0,a.jsx)(n.code,{children:"@ManyToManyView"})," to quickly simulate the effect of scenario 1."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"basic-relationship-mapping",children:"Basic relationship mapping"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"LearningLink.student"})," and ",(0,a.jsx)(n.code,{children:"LearningLink.course"})]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="LearningLink.java"',children:"@Entity\npublic interface LearningLink {\n\n    @ManyToOne\n    // highlight-next-line\n    Student student(); \u2460\n\n    @ManyToOne\n    // highlight-next-line  \n    Course course(); \u2461\n\n    Integer score();\n\n    ...other code omitted...\n}\n"})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="LearningLink.kt"',children:"@Entity\ninterface LearningLink {\n\n    @ManyToOne\n    // highlight-next-line\n    val student: Student \u2460\n\n    @ManyToOne \n    // highlight-next-line\n    val course: Course \u2461\n\n    val score: Int?\n\n    ...other code omitted...\n}\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Where \u2460 and \u2461 will be referenced by subsequent code"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Student.learningLinks"})}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Student.java"',children:'@Entity\npublic interface Student {\n\n    @OneToMany(mappedBy = "student")\n    // highlight-next-line\n    List<LearningLink> learningLinks(); \u2462\n\n    ...other code omitted...\n}\n'})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Student.kt"',children:'@Entity\ninterface Student {\n\n    @OneToMany(mappedBy = "student")\n    // highlight-next-line\n    val learningLinks: List<LearningLink> \u2462\n\n    ...other code omitted...\n}\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"Where \u2462 will be referenced by subsequent code"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Course.learningLinks"})}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Course.java"',children:'@Entity\npublic interface Course {\n\n    @OneToMany(mappedBy = "course")\n    // highlight-next-line\n    List<LearningLink> learningLinks(); \u2463\n\n    ...other code omitted...\n}\n'})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Course.kt"',children:'@Entity\ninterface Course {\n\n    @OneToMany(mappedBy = "course")\n    // highlight-next-line\n    val learningLinks: List<LearningLink> \u2463\n\n    ...other code omitted...\n}\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"Where \u2463 will be referenced by subsequent code"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"using-manytomanyview",children:"Using @ManyToManyView"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Simulate many-to-many association: ",(0,a.jsx)(n.code,{children:"Student.courses"})]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Student.java"',children:'@Entity\npublic interface Student {\n\n    @ManyToManyView(\n        prop = "learningLinks", \u2776 -> \u2462\n        deeperProp = "course" \u2777 -> \u2461 \n    )\n    // highlight-next-line\n    List<Course> courses();\n\n    // The one-to-many association `learningLinks` \n    // has been declared in step 1\n    @OneToMany(mappedBy = "student")\n    List<LearningLink> learningLinks(); \u2462\n\n    ...other code omitted...\n}\n'})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Student.kt"',children:'@Entity\ninterface Student {\n\n    @ManyToManyView(\n        prop = "learningLinks", \u2776 -> \u2462\n        deeperProp = "course" \u2777 -> \u2461\n    )\n    // highlight-next-line\n    val courses: List<Course>\n\n    // The one-to-many association `learningLinks` \n    // has been declared in step 1\n    @OneToMany(mappedBy = "student")\n    val learningLinks: List<LearningLink> \u2462\n\n    ...other code omitted...\n}\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The current property ",(0,a.jsx)(n.code,{children:"Student.courses"})," can be obtained in two steps:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["\u2776 ",(0,a.jsx)(n.code,{children:'prop = "learningLinks"'})]}),"\n",(0,a.jsxs)(n.p,{children:["First, get all ",(0,a.jsx)(n.code,{children:"LearningLink"})," objects through another property of the current entity ",(0,a.jsx)(n.code,{children:"Student.learningLinks"})," \u2462"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["\u2777 ",(0,a.jsx)(n.code,{children:'deeperProp = "course"'})]}),"\n",(0,a.jsxs)(n.p,{children:["For each ",(0,a.jsx)(n.code,{children:"LearningLink"})," object obtained in the previous step, ",(0,a.jsx)(n.code,{children:"Course"})," can be further obtained through the ",(0,a.jsx)(n.code,{children:"LearningLink.course"})," property \u2461"]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Since the ",(0,a.jsx)(n.code,{children:"LearningLink"})," entity has only one many-to-one association pointing to the ",(0,a.jsx)(n.code,{children:"Course"})," entity, there is no ambiguity, so ",(0,a.jsx)(n.code,{children:'deeperProp = "course"'})," can be omitted here"]})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Simulate many-to-many association: ",(0,a.jsx)(n.code,{children:"Course.students"})]}),"\n",(0,a.jsxs)(r.A,{groupId:"language",children:[(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Course.java"',children:'@Entity\npublic interface Course {\n\n    @ManyToManyView(\n        prop = "learningLinks", \u2776 -> \u2463\n        deeperProp = "student" \u2777 -> \u2460  \n    )\n    // highlight-next-line\n    List<Student> students();\n\n    // The one-to-many association `learningLinks` has been declared in step 1\n    @OneToMany(mappedBy = "course")\n    List<LearningLink> learningLinks(); \u2463\n\n    ...other code omitted...\n}\n'})})}),(0,a.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Course.kt"',children:'@Entity\ninterface Course {\n\n    @ManyToManyView(\n        prop = "learningLinks", \u2776 -> \u2463\n        deeperProp = "student" \u2777 -> \u2460\n    )\n    // highlight-next-line\n    val students: List<Student>\n\n    // The one-to-many association `learningLinks` has been declared in step 1  \n    @OneToMany(mappedBy = "course")\n    val learningLinks: List<LearningLink> \u2463\n\n    ...other code omitted...\n}\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The current property ",(0,a.jsx)(n.code,{children:"Course.students"})," can be obtained in two steps:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["\u2776 ",(0,a.jsx)(n.code,{children:'prop = "learningLinks"'})]}),"\n",(0,a.jsxs)(n.p,{children:["First, get all ",(0,a.jsx)(n.code,{children:"LearningLink"})," objects through another property of the current entity ",(0,a.jsx)(n.code,{children:"Course.learningLinks"})," \u2463"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["\u2777 ",(0,a.jsx)(n.code,{children:'deeperProp = "student"'})]}),"\n",(0,a.jsxs)(n.p,{children:["For each ",(0,a.jsx)(n.code,{children:"LearningLink"})," object obtained in the previous step, ",(0,a.jsx)(n.code,{children:"Student"})," can be further obtained through the ",(0,a.jsx)(n.code,{children:"LearningLink.student"})," property \u2460"]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Since the ",(0,a.jsx)(n.code,{children:"LearningLink"})," entity has only one many-to-one association pointing to the ",(0,a.jsx)(n.code,{children:"Student"})," entity, there is no ambiguity, so ",(0,a.jsx)(n.code,{children:'deeperProp = "student"'})," can be omitted here"]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-essence-of-manytomanyview",children:"The essence of @ManyToManyView"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The property declared by ",(0,a.jsx)(n.code,{children:"@ManyToManyView"})," does not maintain its own data, it is only a view of the original property, which proxies and wraps the collection returned by the original property."]}),"\n",(0,a.jsxs)(n.p,{children:["Take the Java example in this article ",(0,a.jsx)(n.code,{children:"Student"})," side as an example (the ",(0,a.jsx)(n.code,{children:"Course"})," side is the same)."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Original association property: List<LearningLink> learningLinks();"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"View association property: List<Course> courses();"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You can understand the ManyToManyView view property with this pseudocode:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@Override  \npublic List<Course> courses() {\n    return new ListProxy<>(\n        this.learningLinks(),  \n        LearningLink::course\n    );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The view association property returns a proxy collection that wraps the collection of the original property and transforms the elements of the original collection."}),"\n",(0,a.jsx)(n.p,{children:"It is obvious that the two are essentially the same and share the same data."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"When constructing entity objects, only the original property can be set, not the view property."}),"\n",(0,a.jsxs)(n.p,{children:["This is different from ",(0,a.jsx)(n.a,{href:"./id-view",children:"@IdView"}),". For ",(0,a.jsx)(n.a,{href:"./id-view",children:"@IdView"}),", both the original property and the view property can be set."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Whether it is the original property or the view property, the preprocessor will generate code to match them, so both can be used in ",(0,a.jsx)(n.a,{href:"../../../query/object-fetcher",children:"object fetchers"})," and strongly typed SQL DSL."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},19365:(e,n,i)=>{i.d(n,{A:()=>r});i(96540);var t=i(18215);const a={tabItem:"tabItem_Ymn6"};var s=i(74848);function r(e){let{children:n,hidden:i,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,r),hidden:i,children:n})}},11470:(e,n,i)=>{i.d(n,{A:()=>k});var t=i(96540),a=i(18215),s=i(23104),r=i(56347),o=i(205),l=i(57485),d=i(31682),c=i(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:i}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:i,attributes:t,default:a}}=e;return{value:n,label:i,attributes:t,default:a}}))}(i);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function p(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:i}=e;const a=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:i=!1,groupId:a}=e,s=u(e),[r,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=i.find((e=>e.default))??i[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[d,h]=m({queryString:i,groupId:a}),[g,x]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,c.Dv)(i);return[a,(0,t.useCallback)((e=>{i&&s.set(e)}),[i,s])]}({groupId:a}),y=(()=>{const e=d??g;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{y&&l(y)}),[y]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,s]),tabValues:s}}var x=i(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=i(74848);function b(e){let{className:n,block:i,selectedValue:t,selectValue:r,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const n=e.currentTarget,i=l.indexOf(n),a=o[i].value;a!==t&&(d(n),r(a))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=l.indexOf(e.currentTarget)+1;n=l[i]??l[0];break}case"ArrowLeft":{const i=l.indexOf(e.currentTarget)-1;n=l[i]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":i},n),children:o.map((e=>{let{value:n,label:i,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:h,onClick:c,...s,className:(0,a.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":t===n}),children:i??n},n)}))})}function v(e){let{lazy:n,children:i,selectedValue:s}=e;const r=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function f(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,j.jsx)(b,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function k(e){const n=(0,x.A)();return(0,j.jsx)(f,{...e,children:h(e.children)},String(n))}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(96540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);