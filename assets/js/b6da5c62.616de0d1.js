"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[3950],{54566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"query/paging/usage","title":"Usage","description":"Features of Jimmer Pagination","source":"@site/docs/query/paging/usage.mdx","sourceDirName":"query/paging","slug":"/query/paging/usage","permalink":"/jimmer-doc/docs/query/paging/usage","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/query/paging/usage.mdx","tags":[],"version":"current","lastUpdatedAt":1714129053000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Usage"},"sidebar":"tutorialSidebar","previous":{"title":"Smart Paging","permalink":"/jimmer-doc/docs/query/paging/"},"next":{"title":"Table Join Optimization","permalink":"/jimmer-doc/docs/query/paging/unncessary-join"}}');var i=t(74848),r=t(28453),s=t(11470),l=t(19365);const o={sidebar_position:1,title:"Usage"},c=void 0,d={},h=[{value:"Features of Jimmer Pagination",id:"features-of-jimmer-pagination",level:2},{value:"When Used with Spring Data",id:"when-used-with-spring-data",level:2},{value:"When Not Using Spring Data",id:"when-not-using-spring-data",level:2},{value:"Jimmer&#39;s Page object",id:"jimmers-page-object",level:3},{value:"Implement Business Logic",id:"implement-business-logic",level:3},{value:"Internal Mechanism",id:"internal-mechanism",level:2},{value:"Dialects",id:"dialects",level:2},{value:"Default Behavior",id:"default-behavior",level:3},{value:"MySqlDialect",id:"mysqldialect",level:3},{value:"OracleDialect",id:"oracledialect",level:3},{value:"Used with Object Fetcher",id:"used-with-object-fetcher",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"features-of-jimmer-pagination",children:"Features of Jimmer Pagination"}),"\n",(0,i.jsx)(n.p,{children:"Pagination query is a very characteristic function of Jimmer, which can greatly improve development efficiency."}),"\n",(0,i.jsx)(n.p,{children:"Pagination requires executing two SQL queries:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Query the total number of rows that meet the criteria, the result of which can calculate how many pages there are in total, and whether the user's page number is out of bounds."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For discussion purposes, Jimmer refers to this SQL as ",(0,i.jsx)(n.code,{children:"count-query"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Query all data within the current page, the number of returned data rows does not exceed the page size, and skip all data from previous pages."}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsxs)(n.p,{children:["For discussion purposes, Jimmer refers to this SQL as ",(0,i.jsx)(n.code,{children:"data-query"}),"."]})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["Jimmer's feature: The developer only needs to write the ",(0,i.jsx)(n.code,{children:"data-query"})," ",(0,i.jsxs)(n.em,{children:["(actual ",(0,i.jsx)(n.code,{children:"data-query"})," without limit and offset)"]}),", and the framework automatically generates the ",(0,i.jsx)(n.code,{children:"count-query"}),"."]}),(0,i.jsxs)(n.p,{children:["Not only can Jimmer automatically generate ",(0,i.jsx)(n.code,{children:"count-query"}),", it can also optimize ",(0,i.jsx)(n.code,{children:"count-query"}),". This optimization will be discussed in ",(0,i.jsx)(n.a,{href:"./unncessary-join",children:"next article"}),"."]})]}),"\n",(0,i.jsx)(n.h2,{id:"when-used-with-spring-data",children:"When Used with Spring Data"}),"\n",(0,i.jsxs)(n.p,{children:["When used with Spring Data, developers derive custom Repository interfaces from ",(0,i.jsx)(n.code,{children:"JRepository/KRepository"}),", and there are two options for adding query methods to the custom interfaces:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Declare abstract methods according to certain conventions, and let Jimmer automatically implement them."}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"This usage is too simple, hiding all details, and is not suitable for discussing pagination here."}),(0,i.jsxs)(n.p,{children:["You can check ",(0,i.jsx)(n.a,{href:"../../spring/repository/abstract",children:"Spring Section/Spring Data Style/Abstract Methods"})," to learn how to implement pagination queries in this way."]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Directly define default methods in the custom interface and implement the query logic yourself."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.A,{groupId:"language",children:[(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"',children:"\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n...other imports omitted...  \n\npublic interface BookRepository<Book, Long> extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default Page<Book> findBooks(\n        Pageable pageable,\n        @Nullable String name,\n        @Nullable String storeName,\n    ) {\n        return sql()\n                .createQuery(table)\n                .whereIf(\n                    name != null && !name.isEmpty(),\n                    table.name().eq(name)\n                )\n                .whereIf(\n                    storeName != null && !storeName.isEmpty(),\n                    table.store().name().eq(storeName)\n                )\n                .orderBy(SpringOrders.toOrders(table, pageable.getSort())) \u2776\n                .select(table)\n                .fetchPage( \u2777\n                    pageable.getPageNumber(), \n                    pageable.getPageSize()\n                    SpringPageFactory.getInstance()\n                );\n    }\n}\n"})})}),(0,i.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"',children:"import org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable  \n...other imports omitted...\n\ninterface BookRepository<Book, Long> : KRepository<Book, Long> {\n\n    fun findBooks(\n        pageable: Pageable,\n        name: String? = null,\n        storeName: String? = null\n    ): Page<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name eq it)\n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.store.name eq it)\n                }\n                orderBy(pageable.sort) \u2776\n                select(table)\n            }\n            .fetchSpringPage(pageable) \u2777\n}\n"})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2776 Since Spring Data's ",(0,i.jsx)(n.code,{children:"Pageable"})," contains dynamic sorting, dynamic sorting needs to be applied."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2777 Pagination query, returns ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Page<Book>"})," type of object"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Jimmer pagination can use any ",(0,i.jsx)(n.code,{children:"Page"})," object, whether it's Spring Data's ",(0,i.jsx)(n.code,{children:"Page"}),", Jimmer's own ",(0,i.jsx)(n.code,{children:"Page"}),", or even ",(0,i.jsx)(n.code,{children:"Page"})," defined by third parties."]}),"\n",(0,i.jsxs)(n.p,{children:["Here, the Java code uses ",(0,i.jsx)(n.code,{children:"SpringPageFactory.getInstance()"})," to request the current pagination operation to return Spring Data's ",(0,i.jsx)(n.code,{children:"Page"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In fact, the Kotlin code can also use ",(0,i.jsx)(n.code,{children:"SpringPageFactory.getInstance()"})," for the same purpose, but in Kotlin there is a more convenient extension method ",(0,i.jsx)(n.code,{children:"fetchSpringPage()"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If we execute:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Page<Book> page = bookRepository.findBooks(\n    PageRequest.of(\n        1,\n        5,\n        SortUtils.toSort("name asc, edition desc") \n    ),\n    null,\n    null\n)\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["In Spring Data, the page number of ",(0,i.jsx)(n.code,{children:"Pageable"})," starts from 0 instead of 1, so this queries the second page."]})}),"\n",(0,i.jsx)(n.p,{children:"It will generate two SQL statements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"count-query"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n    count(tb_1_.ID) \nfrom BOOK tb_1_\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["data-query ",(0,i.jsx)(n.em,{children:"(assuming the database is H2)"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.CREATED_TIME, \n    tb_1_.MODIFIED_TIME,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_ \norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\nlimit ? /* 5 */, ? /* 5 */ \n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This example allows us to understand Jimmer's pagination functionality, but Jimmer's Spring API hides some details. Therefore, next we bypass Spring Data and explain more clearly from a lower level perspective."}),"\n",(0,i.jsx)(n.h2,{id:"when-not-using-spring-data",children:"When Not Using Spring Data"}),"\n",(0,i.jsx)(n.h3,{id:"jimmers-page-object",children:"Jimmer's Page object"}),"\n",(0,i.jsxs)(n.p,{children:["Since Spring Data is not used, naturally ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Page<T>"})," cannot be used."]}),"\n",(0,i.jsxs)(n.p,{children:["For this, Jimmer defines ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.Page<T>"})," with the following definition:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Page.java"',children:"package org.babyfish.jimmer;\n\npublic class Page<T> {\n\n    private final List<T> rows;\n    \n    private final int totalRowCount;\n    \n    private final int totalPageCount;\n    \n    ...Omit other fields...\n    \n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It can be seen that Jimmer's own ",(0,i.jsx)(n.code,{children:"Page<T>"})," is much simpler than Spring Data's ",(0,i.jsx)(n.code,{children:"Page<T>"}),", the differences are:"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Page<T>"})," is designed for server-side paging so that the page must still maintain its previous state after being refreshed. A lot of information ",(0,i.jsx)(n.em,{children:"(such as tedious sort information)"})," needs to be returned verbatim to the client, so it is very complex."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.Page<T>"})," is designed for rich client pages. Such client pages are stateful applications themselves, the server only needs to provide pure data services, so returning just the bare necessities is enough, hence very simple."]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"implement-business-logic",children:"Implement Business Logic"}),"\n",(0,i.jsxs)(s.A,{groupId:"language",children:[(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public Page<Book> findBooks(\n    int pageIndex,\n    int pageSize,\n    @Nullable String name,\n    @Nullable String storeName  \n) {\n  return\n    sqlClient\n        .createQuery(table)\n        .whereIf(\n            name != null && !name.isEmpty(),\n            table.name().eq(name)  \n        )\n        .whereIf(\n            storeName != null && !storeName.isEmpty(),  \n            table.store().name().eq(storeName)\n        )\n        .orderBy(table.name().asc(), table.edition().desc())\n        .select(table)\n        // highlight-next-line  \n        .fetchPage(pageIndex, pageSize);\n}\n"})})}),(0,i.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun findBooks(\n    pageIndex: Int,\n    pageSize: Int,\n    name: String? = null,\n    storeName: String? = null  \n): Page<Book> =\n  sql\n    .createQuery(Book::class) {\n        name?.takeIf { it.isNotEmpty() }?.let {\n            where(table.name eq it)\n        }\n        storeName?.takeIf { it.isNotEmpty() }?.let {\n            where(table.store.name eq it)  \n        }\n        orderBy(table.name.asc(), table.edition.desc())\n        select(table)\n    }\n    // highlight-next-line  \n    .fetchPage(pageIndex, pageSize)\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The finally generated SQL is the same as the example discussed earlier with Spring Data, so I won't repeat it here."}),"\n",(0,i.jsx)(n.h2,{id:"internal-mechanism",children:"Internal Mechanism"}),"\n",(0,i.jsx)(n.p,{children:"In the above examples, we discussed language differences between Java and Kotlin, as well as using or not using Spring Data."}),"\n",(0,i.jsx)(n.p,{children:"The underlying logic of these behaviors is the same, taking Java as an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable table = Tables.BOOK_TABLE;\n\nConfigurableRootQuery<Book> query = \u2776\n  sqlClient\n    .createQuery(table)\n    .whereIf(\n        name != null && !name.isEmpty(),\n        table.name().eq(name)\n    )  \n    .whereIf(\n        storeName != null && !storeName.isEmpty(),\n        table.store().name().eq(storeName)\n    )\n    .orderBy(table.name().asc(), table.edition().desc())\n\nint totalCount = query.fetchUnlimitedCount(); \u2777\nint totalPage = (totalCount + pageSize - 1) / pageSize;\nif (pageIndex >= totalPage) {\n    return new Page<Book>(totalCount, totalPage, Collections.emptyList()); \n}\nList<Book> entities = query\n    .limit(pageSize, pageIndex * pageSize) \u2778 \n    .execute(); \u2779\nreturn new Page<>( \u277a\n    totalCount,\n    totalPage,\n    entities\n)\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsxs)(n.p,{children:["To simplify the discussion, this pseudocode does not consider ",(0,i.jsx)(n.a,{href:"./reverse-sorting",children:"reverse sorting optimization"}),"."]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2776 Create the query, but do not execute it yet. I can call it the template query."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2777 Based on the original template query without modification, generate the ",(0,i.jsx)(n.code,{children:"count-query"}),", then execute the ",(0,i.jsx)(n.code,{children:"count-query"})," to get the total number of rows before pagination."]}),"\n",(0,i.jsxs)(n.p,{children:["Here the ",(0,i.jsx)(n.code,{children:"fetchUnlimitedCount"})," method is a shortcut API, and its underlying logic is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface ConfigurableRootQuery<T extends Table<?>, R> extends ... {\n\n    default int fetchUnlimitedCount() {\n        return count(null);\n    }\n    \n    default int fetchUnlimitedCount(Connection con) {\n        return reselect((q, t) -> q.select(t.count()))\n            .withoutSortingAndPaging()\n            .execute(con)\n            .get(0)\n            .intValue();\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"reselect((q, t) -> q.select(t.count()))"}),": The ",(0,i.jsx)(n.code,{children:"count-query"})," does not query data, but queries COUNT"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"withoutSortingAndPaging()"}),": The ",(0,i.jsx)(n.code,{children:"count-query"})," does not need the sorting clause ",(0,i.jsx)(n.code,{children:"order by"})," nor the paging clause ",(0,i.jsxs)(n.em,{children:["(such as H2's ",(0,i.jsx)(n.code,{children:"limit ? offset ?"}),")"]})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Not only can Jimmer automatically generate ",(0,i.jsx)(n.code,{children:"count-query"}),", it can also automatically optimize ",(0,i.jsx)(n.code,{children:"count-query"}),", please refer to ",(0,i.jsx)(n.a,{href:"./unncessary-join",children:"Join Optimization"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2778 ",(0,i.jsx)(n.code,{children:"limit(limit, offset)"}),": Based on the original template query without modification, generate the real ",(0,i.jsx)(n.code,{children:"data-query"})," with pagination limits."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2779 Execute the ",(0,i.jsx)(n.code,{children:"data-query"})," generated in \u2778 to get the data within one page."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u277a Combine the data obtained in \u2777 and \u2779 into the page object and return it."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dialects",children:"Dialects"}),"\n",(0,i.jsxs)(n.p,{children:["This section discusses the SQL implementation of ",(0,i.jsx)(n.code,{children:"data-query"})," with pagination limits under different databases."]}),"\n",(0,i.jsx)(n.p,{children:"Consider the following single page data query:"}),"\n",(0,i.jsxs)(s.A,{groupId:"language",children:[(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"List<Book> books = query\n  // highlight-next-line \n  .limit(/*limit*/ 10, /*offset*/ 90)\n  .execute();\n"})})}),(0,i.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = query\n  // highlight-next-line\n  .limit(limit = 10, offset = 90)\n  .execute()  \n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"limit(limit, offset)"})," sets the pagination range."]}),"\n",(0,i.jsx)(n.p,{children:"Different databases have vastly different support for pagination queries. So when creating SqlClient, the dialect needs to be specified."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Spring Data configuration method:"}),"\n",(0,i.jsxs)(n.p,{children:["Add a configuration in ",(0,i.jsx)(n.code,{children:"application.properties"})," or ",(0,i.jsx)(n.code,{children:"application.yml"})," called ",(0,i.jsx)(n.code,{children:"jimmer.dialect"})," with value as the class name of the dialect class provided by Jimmer:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:'language-title="application.yml"',children:"jimmer:\n    dialect: org.babyfish.jimmer.sql.dialect.H2Dialect\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Non-Spring Data configuration method:"}),"\n",(0,i.jsxs)(s.A,{groupId:"language",children:[(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    // highlight-next-line  \n    .setDialect(new H2Dialect())\n    ...other code omitted...\n    .build();\n"})})}),(0,i.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val sqlClient = newKSqlClient {\n    // highlight-next-line\n    setDialect(H2Dialect())\n    ...other code omitted...\n}\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Different dialects will use different SQL to implement the ",(0,i.jsx)(n.code,{children:"limit"})," query:"]}),"\n",(0,i.jsx)(n.h3,{id:"default-behavior",children:"Default Behavior"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Default behavior includes DefaultDialect, H2Dialect and PostgresDialect."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n  tb_1_.ID,\n  tb_1_.NAME,\n  tb_1_.EDITION,\n  tb_1_.PRICE,\n  tb_1_.STORE_ID\nfrom BOOK as tb_1_\nleft join BOOK_STORE as tb_2_\n  on tb_1_.STORE_ID = tb_2_.ID\nwhere tb_1_.PRICE between ? and ?\norder by tb_2_.NAME asc, tb_1_.NAME asc\n/* highlight-next-line */  \nlimit ? offset ?\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mysqldialect",children:"MySqlDialect"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n  tb_1_.ID,\n  tb_1_.NAME,\n  tb_1_.EDITION,\n  tb_1_.PRICE,\n  tb_1_.STORE_ID \nfrom BOOK as tb_1_\nleft join BOOK_STORE as tb_2_\n  on tb_1_.STORE_ID = tb_2_.ID\nwhere tb_1_.PRICE between ? and ?\norder by tb_2_.NAME asc, tb_1_.NAME asc\n/* highlight-next-line */\nlimit ?, ?  \n"})}),"\n",(0,i.jsx)(n.h3,{id:"oracledialect",children:"OracleDialect"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When offset is not 0:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from (\n  select core__.*, rownum rn__\n  from (\n    select\n      tb_1_.ID,\n      tb_1_.NAME,\n      tb_1_.EDITION,\n      tb_1_.PRICE,\n      tb_1_.STORE_ID\n    from BOOK as tb_1_\n    left join BOOK_STORE as tb_2_\n      on tb_1_.STORE_ID = tb_2_.ID\n    where tb_1_.PRICE between ? and ?\n    order by tb_2_.NAME asc, tb_1_.NAME asc  \n  ) core__ where rownum <= ? \u2776\n) limited__ where rn__ > ? \u2777\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where the variable at ",(0,i.jsx)(n.code,{children:"\u2776"})," is ",(0,i.jsx)(n.code,{children:"limit + offset"}),", and at ",(0,i.jsx)(n.code,{children:"\u2777"})," is ",(0,i.jsx)(n.code,{children:"offset"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When offset is 0:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select core__.* from (\n  select\n    tb_1_.ID,\n    tb_1_.NAME, \n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID  \n  from BOOK as tb_1_\n  left join BOOK_STORE as tb_2_\n    on tb_1_.STORE_ID = tb_2_.ID\n  core__ where rownum <= ? \u2776\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where \u2776 is the variable ",(0,i.jsx)(n.code,{children:"limit"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"used-with-object-fetcher",children:"Used with Object Fetcher"}),"\n",(0,i.jsx)(n.p,{children:"The object fetcher defines the shape of the queried object, allowing the queried object to carry more associated objects. This feature can be used together with pagination."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"After the paged query is completed, Jimmer launches queries for other association objects, only for objects within a single page."})}),"\n",(0,i.jsxs)(n.p,{children:["Take the Spring Data mode as an example. Now, let's modify the ",(0,i.jsx)(n.code,{children:"BookRepository"})," we discussed earlier to support object fetchers:"]}),"\n",(0,i.jsxs)(s.A,{groupId:"language",children:[(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"',children:"\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n...other imports omitted...\n\npublic interface BookRepository<Book, Long> extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default Page<Book> findBooks(\n        Pageable pageable,\n        // highlight-next-line \n        @Nullable Fetch<Book> fetcher,\n        @Nullable String name,\n        @Nullable String storeName\n    ) {\n        return sql()\n            .createQuery(table)\n            .whereIf(\n                name != null && !name.isEmpty(),\n                table.name().eq(name)\n            )\n            .whereIf(\n                storeName != null && !storeName.isEmpty(),\n                table.store().name().eq(storeName)\n            )\n            .orderBy(SpringOrders.toOrders(table, pageable.getSort()))\n            .select(\n                // highlight-next-line\n                table.fetch(fetcher)\n            )\n            // highlight-next-line\n            .fetchPage(\n                pageable.getPageNumber(), \n                pageable.getPageSize(), \n                SpringPageFactory.getInstance()\n            );\n    }\n}\n"})})}),(0,i.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"',children:"import org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable  \n...other imports omitted...\n\ninterface BookRepository<Book, Long> : KRepository<Book, Long> {\n\n    fun findBooks(\n        pageable: Pageable,\n        // highlight-next-line\n        fetcher: Fetcher<Book>? = null,\n        name: String? = null,\n        storeName: String? = null\n    ): Page<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name eq it)\n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.store.name eq it)\n                }\n                orderBy(pageable.sort)\n                select(\n                    // highlight-next-line\n                    table.fetch(fetcher)\n                )\n            }\n            // highlight-next-line\n            .fetchSpringPage(pageable)\n}\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"If called as follows:"}),"\n",(0,i.jsxs)(s.A,{groupId:"language",children:[(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Page.java"',children:'Page<Book> page = bookRepository.findBooks(\n    PageRequest.of(\n        1,\n        5,\n        SortUtils.toSort("name asc, edition desc")\n    ),\n    Fetchers.BOOK_FETCHER\n        .allScalarFields()\n        .store(\n            Fetchers.BOOK_STORE_FETCHER\n                .allScalarFields()\n        )\n        .authors(\n            Fetchers.AUTHOR_FETCHER\n                .allScalarFields()\n        ),\n    null, \n    null\n);\n'})})}),(0,i.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="Page.kt"',children:'val page = bookRepository.findBooks(\n    PageRequest.of(\n        1,\n        5,\n        SortUtils.toSort("name asc, edition desc")\n    ),\n    newFetcher(Book::class).by {\n        allScalarFields()\n        store {\n            allScalarFields()\n        }\n        authors {\n            allScalarFields()\n        }\n    }\n)\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"It will generate the following 4 SQL statements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"count-query"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n    count(tb_1_.ID)\nfrom BOOK tb_1_ \n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["data-query ",(0,i.jsx)(n.em,{children:"(assuming the database is H2)"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.CREATED_TIME,\n    tb_1_.MODIFIED_TIME,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_\norder by \n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\nlimit ? /* 5 */, ? /* 5 */\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query the many-to-one association ",(0,i.jsx)(n.code,{children:"Book.store"})," for the 5 paged objects"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.NAME\nfrom BOOK_STORE tb_1_\nwhere\n    tb_1_.ID in (\n        ? /* 2 */, ? /* 1 */  \n    )\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Although there are 5 paged objects, their foreign key ",(0,i.jsx)(n.code,{children:"STORE_ID"})," only has two values."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query the many-to-many association ",(0,i.jsx)(n.code,{children:"Book.authors"})," for the 5 paged objects"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select\n    tb_2_.BOOK_ID,\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_\n    on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere\n    tb_2_.BOOK_ID in (\n        ? /* 10 */, ? /* 3 */, ? /* 2 */,  \n        ? /* 1 */, ? /* 9 */\n    )\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Finally, in the obtained pagination, each object conforms to the data structure of the object fetcher."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    // highlight-next-line\n    "content":[ // Current page\n        {\n            "id":12,\n            "name":"GraphQL in Action",\n            "edition":3,\n            "price":80,\n            "store":{\n                "id":2,\n                "name":"MANNING",\n                "website":null\n            },\n            "authors":[\n                {\n                    "id":5,\n                    "firstName":"Samer",\n                    "lastName":"Buna",\n                    "gender":"MALE"\n                }\n            ]\n        },\n        {\n            "id":11,\n            "name":"GraphQL in Action",\n            "edition":2,\n            "price":81,\n            "store":{\n                "id":2,\n                "name":"MANNING",\n                "website":null\n            },\n            "authors":[\n                {\n                    "id":5,\n                    "firstName":"Samer",\n                    "lastName":"Buna",\n                    "gender":"MALE"\n                }\n            ]\n        },\n        {\n            "id":10,\n            "name":"GraphQL in Action",\n            "edition":1,\n            "price":82,\n            "store":{\n                "id":2,\n                "name":"MANNING",\n                "website":null\n            },\n            "authors":[\n                {\n                    "id":5,\n                    "firstName":"Samer",\n                    "lastName":"Buna",\n                    "gender":"MALE"\n                }\n            ]\n        },\n        {\n            "id":3,\n            "name":"Learning GraphQL",\n            "edition":3,\n            "price":51,\n            "store":{\n                "id":1,\n                "name":"O\'REILLY",\n                "website":null\n            },\n            "authors":[\n                {\n                    "id":2,\n                    "firstName":"Alex",\n                    "lastName":"Banks",\n                    "gender":"MALE"\n                },\n                {\n                    "id":1,\n                    "firstName":"Eve",\n                    "lastName":"Procello",\n                    "gender":"FEMALE"\n                }\n            ]\n        },\n        {\n            "id":2,\n            "name":"Learning GraphQL",\n            "edition":2,\n            "price":55,\n            "store":{\n                "id":1,\n                "name":"O\'REILLY",\n                "website":null\n            },\n            "authors":[\n                {\n                    "id":2,\n                    "firstName":"Alex",\n                    "lastName":"Banks",\n                    "gender":"MALE"\n                },\n                {\n                    "id":1,\n                    "firstName":"Eve",\n                    "lastName":"Procello",\n                    "gender":"FEMALE"\n                }\n            ]\n        }\n    ],\n    // highlight-next-line\n    "totalPages":3, // Total page count is 3\n    // highlight-next-line\n    "totalElements":12, // Total row count before pagination is 12\n\n    ...Spring Data\'s Page object has too many properties, ommitted...\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(18215);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(96540),i=t(18215),r=t(23104),s=t(56347),l=t(205),o=t(57485),c=t(31682),d=t(70679);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=u(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[c,h]=g({queryString:t,groupId:i}),[p,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),j=(()=>{const e=c??p;return m({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{j&&o(j)}),[j]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),b(e)}),[h,b,r]),tabValues:r}}var b=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function f(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),i=l[t].value;i!==a&&(c(n),s(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...r,className:(0,i.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function _(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=p(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",j.tabList),children:[(0,x.jsx)(f,{...n,...e}),(0,x.jsx)(_,{...n,...e})]})}function v(e){const n=(0,b.A)();return(0,x.jsx)(y,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);