"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[3840],{86555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"mapping/advanced/remote","title":"Remote Association","description":"Remote association is a product of combining Jimmer with microservice architecture. It will be introduced in detail in Spring Cloud and Remote Association.","source":"@site/docs/mapping/advanced/remote.mdx","sourceDirName":"mapping/advanced","slug":"/mapping/advanced/remote","permalink":"/jimmer-doc/docs/mapping/advanced/remote","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mapping/advanced/remote.mdx","tags":[],"version":"current","lastUpdatedAt":1708889915000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Remote Association"},"sidebar":"tutorialSidebar","previous":{"title":"Key","permalink":"/jimmer-doc/docs/mapping/advanced/key"},"next":{"title":"OnDissociate","permalink":"/jimmer-doc/docs/mapping/advanced/on-dissociate"}}');var a=t(74848),r=t(28453),o=t(11470),s=t(19365);const c={sidebar_position:10,title:"Remote Association"},l=void 0,d={},u=[{value:"@Entity",id:"entity",level:2},{value:"@MappedSuperclass",id:"mappedsuperclass",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsxs)(n.p,{children:["Remote association is a product of combining Jimmer with microservice architecture. It will be introduced in detail in ",(0,a.jsx)(n.a,{href:"../../spring/spring-cloud",children:"Spring Cloud and Remote Association"}),"."]}),(0,a.jsx)(n.p,{children:"The purpose of this article is not to systematically explain remote associations, just to introduce the mapping configuration required for remote associations."})]}),"\n",(0,a.jsx)(n.h2,{id:"entity",children:"@Entity"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"@Entity"})," annotation has an optional parameter ",(0,a.jsx)(n.code,{children:"microServiceName"}),' whose default value is "".']}),"\n",(0,a.jsxs)(n.p,{children:["Association properties involve two entity types. Since associations must point from the source to the target ",(0,a.jsx)(n.em,{children:"(self association properties are special, the source and target overlap)"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"microServiceName"})," of the source entity and target entity of the association property are equal, then this association is a local association ",(0,a.jsxs)(n.em,{children:["(All entities in the examples before this article use the default ",(0,a.jsx)(n.code,{children:"microServiceName"}),", so they are local associations)"]}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"microServiceName"})," of the source entity and target entity of the association property are not equal, then this association is a remote association."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For example:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Owning side ",(0,a.jsx)(n.em,{children:"(required)"}),": ",(0,a.jsx)(n.code,{children:"Book.authors"})]}),"\n",(0,a.jsxs)(o.A,{groupId:"language",children:[(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Book.java"',children:'// highlight-next-line \n@Entity(microServiceName = "book-service")\npublic interface Book {\n\n    @ManyToMany\n    List<Author> authors();\n\n    ...Omit other code...\n}\n'})})}),(0,a.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:'// highlight-next-line\n@Entity(microServiceName = "book-service") \ninterface Book {\n\n    @ManyToMany\n    val authors: List<Author>\n\n    ...Omit other code...\n}\n'})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Inverse side ",(0,a.jsx)(n.em,{children:"(optional)"}),": ",(0,a.jsx)(n.code,{children:"Author.authors"})]}),"\n",(0,a.jsxs)(o.A,{groupId:"language",children:[(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Author.java"',children:'// highlight-next-line\n@Entity(microServiceName = "author-service")\npublic interface Author {\n\n    @ManyToMany(mappedBy = "authors") \n    List<Book> books();\n\n    ...Omit other code...\n}\n'})})}),(0,a.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="Author.kt"',children:'// highlight-next-line\n@Entity(microServiceName = "author-service")\ninterface Author {\n\n    @ManyToMany(mappedBy = "authors")\n    val books: List<Book>\n\n    ...Omit other code...\n}\n'})})})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Here, the microservice name of ",(0,a.jsx)(n.code,{children:"Book"})," is ",(0,a.jsx)(n.code,{children:"book-service"}),", and the microservice name of ",(0,a.jsx)(n.code,{children:"Author"})," is ",(0,a.jsx)(n.code,{children:"author-service"}),". The two are not equal, so ",(0,a.jsx)(n.code,{children:"Book.authors"})," and ",(0,a.jsx)(n.code,{children:"Author.books"})," are remote associations."]}),"\n",(0,a.jsx)(n.h2,{id:"mappedsuperclass",children:"@MappedSuperclass"}),"\n",(0,a.jsxs)(n.p,{children:["As a super type, ",(0,a.jsx)(n.code,{children:"MappedSuperclass"})," has two usages:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Can contain association properties, but must belong to the same microservice"}),"\n",(0,a.jsxs)(o.A,{groupId:"language",children:[(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="BookServiceCommonEnity.java" ',children:'// highlight-next-line\n@MappedSuperclass(microServiceName = "book-service")\npublic interface BookServiceCommonEnity {\n\n    LocalDateTime createdTime();\n\n    @ManyToOne  \n    User createdBy();\n\n    LocalDateTime modifiedTime();\n\n    @ManyToOne\n    User modifiedBy();\n}\n'})})}),(0,a.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookServiceCommonEnity.kt"',children:'// highlight-next-line\n@MappedSuperclass(microServiceName = "book-service") \ninterface BookServiceCommonEnity {\n\n    val createdTime: LocalDateTime\n\n    @ManyToOne\n    val createdBy: User\n\n    val modifiedTime: LocalDateTime\n\n    @ManyToOne\n    val modifiedBy: User\n}\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here ",(0,a.jsx)(n.code,{children:"BookServiceCommonEnity"})," contains association properties ",(0,a.jsx)(n.code,{children:"createdBy"})," and ",(0,a.jsx)(n.code,{children:"modifiedBy"}),", but only ",(0,a.jsx)(n.code,{children:"Entity"})," or other ",(0,a.jsx)(n.code,{children:"MappedSuperclass"}),' belonging to the microservice "book-service" can inherit it.']}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Can span any microservices, but must not contain association properties"}),"\n",(0,a.jsxs)(o.A,{groupId:"language",children:[(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="CommonEnity.java"',children:"// highlight-next-line\n@MappedSuperclass(acrossMicroServices = true)\npublic interface CommonEnity {\n\n    LocalDateTime createdTime();\n\n    LocalDateTime modifiedTime(); \n}\n"})})}),(0,a.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",metastring:'title="CommonEnity.kt"',children:"// highlight-next-line\n@MappedSuperclass(acrossMicroServices = true)  \ninterface CommonEnity {\n\n    val createdTime: LocalDateTime\n\n    val modifiedTime: LocalDateTime\n}\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here ",(0,a.jsx)(n.code,{children:"CommonEnity"})," can span any microservices. Any ",(0,a.jsx)(n.code,{children:"Entity"})," or other ",(0,a.jsx)(n.code,{children:"MappedSuperclass"})," under any microservice can inherit it, but it itself does not contain any association properties."]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var i=t(18215);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,o),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>k});var i=t(96540),a=t(18215),r=t(23104),o=t(56347),s=t(205),c=t(57485),l=t(31682),d=t(70679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=h(e),[o,c]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[l,u]=p({queryString:t,groupId:a}),[v,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Dv)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),j=(()=>{const e=l??v;return m({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{j&&c(j)}),[j]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),x(e)}),[u,x,r]),tabValues:r}}var x=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function g(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=s[t].value;a!==i&&(l(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>c.push(e),onKeyDown:u,onClick:d,...r,className:(0,a.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=v(e);return(0,f.jsxs)("div",{className:(0,a.A)("tabs-container",j.tabList),children:[(0,f.jsx)(g,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function k(e){const n=(0,x.A)();return(0,f.jsx)(y,{...e,children:u(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(96540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);