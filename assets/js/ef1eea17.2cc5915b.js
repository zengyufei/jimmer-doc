"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[1746],{53194:(e,n,i)=>{i.d(n,{Ay:()=>o,RM:()=>l});var s=i(74848),t=i(28453);const l=[{value:"Scene-1",id:"scene-1",level:2},{value:"Scene-2",id:"scene-2",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Currently, other technologies that operate on SQL, whether ORM or non-ORM, have a blank area: they only consider dynamic ",(0,s.jsx)(n.code,{children:"where"}),", and do not consider ",(0,s.jsx)(n.code,{children:"dynamic join"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Dynamic JOIN"})," is defined as: If some dynamic query conditions are for tables other than the current table. This means"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"When the condition is met: First join to other tables through association properties, then add dynamic where conditions to the joined table"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"When the condition is not met: Cannot join other tables through association properties"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"scene-1",children:"Scene-1"}),"\n",(0,s.jsx)(n.p,{children:"Let's first look at the first scene, taking MyBatis oriented to native SQL as an example"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Define MyBatis Mapper interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Mapper\npublic interface BookMapper {\n\n    List<Book> findBooks(\n        @Nullable String name,\n        @Nullable String storeName, \n        @Nullable String storeWebsite\n    );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here, all query parameters may be null, which is clearly a dynamic query."}),"\n",(0,s.jsxs)(n.p,{children:["The last two query parameters: ",(0,s.jsx)(n.code,{children:"storeName"})," and ",(0,s.jsx)(n.code,{children:"storeWebsite"}),", their filtering conditions are not applied on the current table ",(0,s.jsx)(n.code,{children:"BOOK"}),", but on the parent table ",(0,s.jsx)(n.code,{children:"BOOK_STORE"}),".\nThat is, when any of these two parameters is non-null, a JOIN to the ",(0,s.jsx)(n.code,{children:"BOOK_STORE"})," table will be generated. This table join dynamically determined by the parameter value is referred to as ",(0,s.jsx)(n.code,{children:"dynamic JOIN"})," in this article."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Define MyBatis SQL mapping XML"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\n        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="somepackage.BookMapper">\n    <select id="findBooks" resultType="somepackage.Book">\n        select * from BOOK as book\n        \x3c!-- highlight-next-line --\x3e\n        <if test="storeName != null or storeWebsite != null"> \u2776\n            inner join BOOK_STORE as store\n                on book.STORE_ID = store.ID\n        </if>\n        <where>\n            <if test="name != null">\n                and book.NAME = #{name}\n            </if>\n            <if test="storeName != null"> \u2777\n                and store.NAME = #{storeName}\n            </if>\n            <if test="storeWebsite != null">\n                and store.WEBSITE = #{storeWebsite} \u2778\n            </if>\n        </where>\n    </select>\n</mapper>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here, \u2776 is the dynamic JOIN. However, for developers, \u2777 and \u2778 are the purpose, and \u2776 is the work that has to be done to support \u2777 and \u2778. Its judgment condition is a burden."}),"\n",(0,s.jsxs)(n.p,{children:["You may have noticed that \u2776 uses ",(0,s.jsx)(n.code,{children:"or"}),". This is easy to understand."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"However, this is only the simplest dynamic connection between two tables. For deeper multi-table join operations, the complexity of dynamic table joins will increase dramatically!"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"scene-2",children:"Scene-2"}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at the second scene. With the previous example as the basis, this example is decoupled from any business."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\n    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="somepackage.AMapper">\n  <select id="findAObjects" resultType="somepackage.A">\n    select distinct A.id\n    from A\n    \x3c!-- highlight-start --\x3e  \n    <if test="bId != null or cId != null or dId != null or eId != null">\n      inner join B on A.ID = B.A_ID \n    </if>\n    <if test="cId != null or dId != null or eId != null">\n      inner join C on B.ID = C.B_ID\n    </if>\n    <if test="dId != null or eId != null">\n      inner join D on C.ID = D.C_ID \n    </if>\n    <if test="eId != null">\n      inner join E on D.ID = E.D_ID\n    </if>\n    \x3c!-- highlight-end --\x3e\n    <where>\n      <if test="aId != null">\n        and A.ID = #{aId}  \n      </if>\n      <if test="bId != null">\n        and B.ID = #{bId}\n      </if>\n      <if test="cId != null">\n        and C.ID = #{cId}\n      </if>\n      <if test="dId != null">\n        and D.ID = #{dId}\n      </if>\n      <if test="eId != null">\n        and E.ID = #{eId}\n      </if>\n    </where>\n  </select>\n</mapper>\n'})}),"\n",(0,s.jsx)(n.p,{children:"The logic of this example is simple. The five tables A, B, C, D and E form a JOIN chain, and each table has a dynamic query condition. However, as you can see, the complexity of dynamic JOIN has become unacceptable."})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},31119:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>h,default:()=>x,frontMatter:()=>d,metadata:()=>s,toc:()=>b});const s=JSON.parse('{"id":"query/dynamic-join/optimization","title":"Optimize Unnecessary Joins","description":"Usage","source":"@site/docs/query/dynamic-join/optimization.mdx","sourceDirName":"query/dynamic-join","slug":"/query/dynamic-join/optimization","permalink":"/jimmer-doc/docs/query/dynamic-join/optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/query/dynamic-join/optimization.mdx","tags":[],"version":"current","lastUpdatedAt":1704100403000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Optimize Unnecessary Joins"},"sidebar":"tutorialSidebar","previous":{"title":"Merge Conflict Joins","permalink":"/jimmer-doc/docs/query/dynamic-join/merge"},"next":{"title":"Pagination Safety","permalink":"/jimmer-doc/docs/query/dynamic-join/table-ex"}}');var t=i(74848),l=i(28453),a=i(53194),o=i(11470),r=i(19365),c=i(74400);const d={sidebar_position:4,title:"Optimize Unnecessary Joins"},h=void 0,u={},b=[{value:"Usage",id:"usage",level:2},{value:"Basic Concepts",id:"basic-concepts",level:3},{value:"Another Solution",id:"another-solution",level:3},{value:"Phantom Joins",id:"phantom-joins",level:2},{value:"Two ways to filter on associated ids",id:"two-ways-to-filter-on-associated-ids",level:3},{value:"Inapplicable Scenarios",id:"inapplicable-scenarios",level:3},{value:"Applicable scenarios",id:"applicable-scenarios",level:3},{value:"Half Joins",id:"half-joins",level:2},{value:"Two ways to filter on associated ids",id:"two-ways-to-filter-on-associated-ids-1",level:3},{value:"Inapplicable scenarios",id:"inapplicable-scenarios-1",level:3},{value:"Applicable scenarios",id:"applicable-scenarios-1",level:3}];function j(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"basic-concepts",children:"Basic Concepts"}),"\n",(0,t.jsx)(n.p,{children:"In Jimmer SQL DSL, created join objects that are not used will be ignored. For example:"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'BookTable table = Tables.BOOK_TABLE;\n\n// highlight-next-line\nSystem.out.println("Unsed join: " + table.store());\n\nList<Book> books = sqlClient\n    .createQuery(table) \n    .orderBy(table.name().asc(), table.edition().desc())\n    .select(table)\n    .execute();\n'})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val books = sqlClient\n    .createQuery(Book::class) {\n        \n        // highlight-next-line\n        println("Unsed join: ${table.store}")\n\n        orderBy(table.name.asc(), table.edition.desc())\n        select(table)\n    }\n    .execute()\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["Although a JOIN object is created via ",(0,t.jsx)(n.code,{children:"table.store"}),", since it is not used by the SQL DSL of the current query, this JOIN object will be ignored."]}),"\n",(0,t.jsx)(n.p,{children:"Therefore, the final generated SQL will not contain any JOIN operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.NAME, \n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK as tb_1_ \nwhere tb_1_.NAME = ?\n"})}),"\n",(0,t.jsx)(n.h3,{id:"another-solution",children:"Another Solution"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(c.l,{buttonText:"Problems with current solutions",children:(0,t.jsx)(a.Ay,{})}),", we listed two scenarios."]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.a,{href:"./merge",children:"previous doc"}),", we discussed solving these two scenarios by utilizing Jimmer SQL DSL's automatic merge of conflicting joins."]}),"\n",(0,t.jsx)(n.p,{children:"Here, we use another approach to solve the same problems."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Solve the problem in scenario 1:"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"List<Book> findBooks(\n        @Nullable String name,\n        @Nullable String storeName,\n        @Nullable String storeWebsite\n) {\n    BookTable table = Tables.BOOK_TABLE;\n\n    // Create JOIN object unconditionally first,  \n    // will be auto ignored if not used later,\n    // so no useless JOIN\n    // highlight-next-line \n    BookStoreTable store = table.store();\n\n    return sqlClient\n        .createQuery(table)\n        .whereIf(\n            name != null,\n            () -> book.name().like(name)\n        )\n        .whereIf(\n            storeName != null, \n            () -> store.name().like(storeName)\n        )\n        .whereIf(\n            storeWebsite != null,\n            () -> store.website().like(storeWebsite)\n        )\n        .select(book)\n        .execute();\n}\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"fun findBooks(\n    name: String? = null,\n    storeName: String? = null,\n    storeWebsite: String? = null\n): List<Book> {\n    return sqlClient\n        .createQuery(Book::class) {\n            \n            // Create JOIN object unconditionally first,\n            // will be auto ignored if not used later, \n            // so no useless JOIN\n            // highlight-next-line\n            val store = table.store\n            \n            name?.let {\n                where(table.name like it)\n            } \n            storeName?.let {\n                where(store.name like it) \n            }\n            storeWebsite?.let {\n                where(store.website like it)\n            }\n            select(table)\n        }\n        .execute()\n}\n"})})})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If only ",(0,t.jsx)(n.code,{children:"name"})," is specified, without ",(0,t.jsx)(n.code,{children:"storeName"})," and ",(0,t.jsx)(n.code,{children:"storeWebsite"}),", then ",(0,t.jsx)(n.code,{children:"store"})," is a created but unused join object, thus ignored. The final generated SQL contains no joins."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK as tb_1_\nwhere tb_1_.NAME = ?\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"storeName"})," and ",(0,t.jsx)(n.code,{children:"storeWebsite"})," are specified, ",(0,t.jsx)(n.code,{children:"store"})," will be used, leading to join operations in the final generated SQL. This is obvious so no example here."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Solve the problem in scenario 2:"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"List<Long> findDistinctIds(\n    @Nullable Long aId,\n    @Nullable Long bId,\n    @Nullable Long cId,\n    @Nullable Long dId,\n    @Nullable Long eId\n) {\n    ATable table = Tables.A_TABLE;\n\n    // Create JOIN objects unconditionally first,\n    // Not used join objects will be auto ignored,\n    // so no useless JOIN objects \n    // highlight-start\n    BTableEx b = table.asTableEx().bs();\n    CTableEx c = b.cs();\n    DTableEx d = c.ds();\n    ETableEx e = d.es();\n    // highlight-end\n\n    return sqlClient\n        .createQuery(table)\n        .whereIf(\n            aId != null,\n            () -> table.id().like(aId)\n        )\n        .whereIf(\n            bId != null,  \n            () -> b.id().like(bId)\n        )\n        .whereIf(\n            cId != null,\n            () -> c.id().like(cId)\n        )\n        .whereIf(\n            dId != null,\n            () -> d.id().like(dId)\n        )\n        .whereIf(\n            eId != null,\n            () -> e.id().like(eId)\n        )\n        .select(book.id())\n        .distinct()\n        .execute();\n}\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"fun findDistinctIds(\n    aId: Long? = null,\n    bId: Long? = null,\n    cId: Long? = null,\n    dId: Long? = null,\n    eId: Long? = null  \n): List<Long> {\n    \n    // Create JOIN object unconditionally first,\n    // will be auto ignored if not used later,\n    // so no useless JOIN\n    // highlight-start  \n    val b = table.asTableEx().bs\n    val c = b.cs\n    val d = c.ds\n    val e = d.es\n    // highlight-end\n\n    return sqlClient\n        .createQuery(A::class) {\n            aId?.let {\n                where(table.id eq it)\n            }\n            bId?.let {\n                where(b.id eq it)\n            }\n            cId?.let {\n                where(c.id eq it)  \n            }\n            dId?.let {\n                where(d.id eq it)\n            }\n            eId?.let {\n                where(e.id eq it)\n            }\n            select(table.id) \n        }\n        .distinct()\n        .execute()\n}\n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Given the basics above, no need to list the generated SQL for different parameter combinations here. Just understand that the final SQL will not contain useless joins."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'When a JOIN object is used by the SQL DSL, it will be marked as "used" to prevent being ignored. This mark is transitive.'}),"\n",(0,t.jsxs)(n.p,{children:["For example: Marking ",(0,t.jsx)(n.code,{children:"d"}),' as "used" will naturally also mark ',(0,t.jsx)(n.code,{children:"c"}),", ",(0,t.jsx)(n.code,{children:"b"})," and ",(0,t.jsx)(n.code,{children:"table"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"asTableEx"})," here (and various TableEx types in Java) is a concept to be introduced in later docs ",(0,t.jsx)(n.a,{href:"./table-ex",children:"Pagination Safety"}),". Please ignore it for now."]}),"\n"]}),"\n"]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"phantom-joins",children:"Phantom Joins"}),"\n",(0,t.jsx)(n.h3,{id:"two-ways-to-filter-on-associated-ids",children:"Two ways to filter on associated ids"}),"\n",(0,t.jsx)(n.p,{children:"For foreign key based associations, there are two ways to filter on the associated id:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Use the foreign key property directly"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book\n        // highlight-next-line\n        .storeId()\n        .eq(2L)  \n    )\n    .select(book)\n    .execute();\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n            // highlight-next-line  \n            .storeId\n            eq 2L\n        )\n        select(table)\n    }\n    .execute()\n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["For one-to-one/many-to-one associations",(0,t.jsx)(n.br,{}),"\n",(0,t.jsxs)(n.em,{children:["(like ",(0,t.jsx)(n.code,{children:"Book.store"})," in this example)"]}),",\neven if the user does not declare an ",(0,t.jsx)(n.a,{href:"../../mapping/advanced/view/id-view",children:"@IdView"}),(0,t.jsx)(n.br,{}),"\n","property for the ",(0,t.jsx)(n.code,{children:"Book"})," entity,\nthe ",(0,t.jsx)(n.code,{children:"storeId"})," property can still be used in SQL DSL."]})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Join to the associated object first, then access the id property"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book\n        .store()\n        // highlight-next-line\n        .id() // only access id\n        .eq(2L)\n    )\n    .select(book)  \n    .execute();\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n            .store\n            // highlight-next-line\n            .id // only access id\n            eq 2L  \n        )\n        select(table)\n    }\n    .execute()\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"These two approaches are not equivalent:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"where(table.storeId().eq(2L))"}),": Simply filter based on the foreign key field of the current table."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"where(table.store().id().eq(2L))"}),": Actually join to the associated table first, then check the associated id value."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"They are not equivalent because:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The foreign key may be fake, i.e. there is no corresponding foreign key constraint in the database. This will cause non-null pseudo foreign keys to be unable to fetch non-null associated objects through joining."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The associated object may be affected by ",(0,t.jsx)(n.a,{href:"../global-filter",children:"global filters"}),", so it should be ignored even if it exists in the database."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["However, the two approaches are completely equivalent ",(0,t.jsx)(n.em,{children:"when all of the following conditions are met"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The association is a one-to-one or many-to-one association based on foreign key, not through a join table or other reverse association mapping."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The foreign key is real, i.e. there is a corresponding foreign key constraint in the database. See ",(0,t.jsx)(n.a,{href:"../../mapping/base/foreignkey",children:"Real and Fake Foreign Keys"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The associated object is not affected by ",(0,t.jsx)(n.a,{href:"../global-filter",children:"global filters"}),". Note this refers to either of:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../global-filter/user-filter",children:"User-defined filters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../global-filter/logical-deleted",children:"Logical deletion filters"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In this case, the id of the associated object is actually just the foreign key of the current table, so they are equivalent."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsx)(n.p,{children:"Developers should understand the difference between these two approaches and choose the right one according to the business needs."}),(0,t.jsx)(n.p,{children:"However, when the two approaches are equivalent, optimizing the second approach into the first one is very beneficial - this is called phantom join elimination."}),(0,t.jsx)(n.p,{children:"The equivalence of the two query methods is a precondition for phantom join elimination to take effect, so this will not be repeated below."})]}),"\n",(0,t.jsx)(n.h3,{id:"inapplicable-scenarios",children:"Inapplicable Scenarios"}),"\n",(0,t.jsxs)(n.p,{children:["Phantom join elimination is only applicable to accessing the ",(0,t.jsx)(n.code,{children:"id"})," property of associated objects, not other properties."]}),"\n",(0,t.jsxs)(n.p,{children:["Here, accessing the ",(0,t.jsx)(n.code,{children:"name"})," property of the associated object is used as an example to demonstrate the inability to eliminate the join."]}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(book.store().name().eq("MANNING")) \n    .select(book)\n    .execute();\n'})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.store.name eq "MANNING")\n        select(table)\n    }\n    .execute()\n'})})})]}),"\n",(0,t.jsx)(n.p,{children:"The generated SQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE, \n    tb_1_.STORE_ID\nfrom BOOK as tb_1_\n    /* highlight-start */ \n    inner join BOOK_STORE as tb_2_\n        on tb_1_.STORE_ID = tb_2_.ID\n    /* highlight-end */\nwhere\n    tb_2_.NAME = ?\n"})}),"\n",(0,t.jsx)(n.h3,{id:"applicable-scenarios",children:"Applicable scenarios"}),"\n",(0,t.jsx)(n.p,{children:"If only the id property of the associated object is accessed, phantom join elimination can be triggered. For example:"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book\n        .store()\n        // highlight-next-line\n        .id() // Access id only\n        .eq(2L)\n    )\n    .select(book)\n    .execute(); \n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n            .store\n            // highlight-next-line\n            .id // Access id only\n            eq 2L\n        )\n        select(table)\n    }\n    .execute()\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"This time, the generated SQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK as tb_1_\nwhere tb_1_.STORE_ID = ?  \n"})}),"\n",(0,t.jsxs)(n.p,{children:["We see no table join in the SQL, only a condition ",(0,t.jsx)(n.code,{children:"tb_1_.STORE_ID = ?"})," based on the foreign key."]}),"\n",(0,t.jsx)(n.p,{children:"The reason: For a many-to-one association mapped by foreign key, the parent table's id is actually the child table's own foreign key."}),"\n",(0,t.jsx)(n.h2,{id:"half-joins",children:"Half Joins"}),"\n",(0,t.jsx)(n.p,{children:"Half joins are a concept similar to phantom joins, but for join table based associations."}),"\n",(0,t.jsx)(n.h3,{id:"two-ways-to-filter-on-associated-ids-1",children:"Two ways to filter on associated ids"}),"\n",(0,t.jsx)(n.p,{children:"For join table based associations, there are two ways to filter on the associated id:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Check the foreign key field in the join table"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book\n        .asTableEx()\n        // highlight-next-line\n        .authorIds()\n        .eq(2L)\n    )\n    .select(book)\n    .execute();\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n            .asTableEx()\n            // highlight-next-line\n            .authorIds\n            eq 2L\n        )\n        select(table)\n    }\n    .execute()\n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"asTableEx"})," here has no substantial function, it will be introduced in\nthe next doc ",(0,t.jsx)(n.a,{href:"./table-ex",children:"Pagination Safety"}),". Please ignore it for now."]})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["For one-to-many/many-to-many associations ",(0,t.jsxs)(n.em,{children:["(like ",(0,t.jsx)(n.code,{children:"Book.authors"})," in this example)"]}),",\n*users must declare an ",(0,t.jsx)(n.a,{href:"../../mapping/advanced/view/id-view",children:"@IdView"})," property\n*for the ",(0,t.jsx)(n.code,{children:"Book"})," entity to access the ",(0,t.jsx)(n.code,{children:"authorIds"})," property in SQL DSL."]})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Join to the associated object first, then access the id property"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book\n        .asTableEx()  \n        .authors()\n        // highlight-next-line\n        .id() // only access id\n        .eq(2L)\n    )\n    .select(book)\n    .execute();\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n            .asTableEx()\n            .authors\n            // highlight-next-line\n            .id // only access id\n            eq 2L\n        )\n        select(table)\n    }\n    .execute()\n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"asTableEx"})," here has no substantial function, it will be introduced in\nthe next doc ",(0,t.jsx)(n.a,{href:"./table-ex",children:"Pagination Safety"}),". Please ignore it for now."]})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"These two approaches are not equivalent:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"where(table.authorIds().eq(2L))"}),": 1 join operation"]}),"\n",(0,t.jsxs)(n.p,{children:["From the current table ",(0,t.jsx)(n.code,{children:"BOOK"}),", join to ",(0,t.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING"})," table and directly check the ",(0,t.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING.AUTHOR_ID"})," field."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"where(table.authors().id().eq(2L))"}),": 2 join operations"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Based on current table ",(0,t.jsx)(n.code,{children:"BOOK"}),", join to ",(0,t.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Based on join table ",(0,t.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING"}),", join to ",(0,t.jsx)(n.code,{children:"AUTHOR"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Finally, check the ",(0,t.jsx)(n.code,{children:"AUTHOR.ID"})," field."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"They are not equivalent because:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The foreign key ",(0,t.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING.AUTHOR_ID"})," may be fake, i.e. there is no corresponding foreign key constraint in the database. This will cause non-null pseudo foreign keys to be unable to fetch non-null associated objects through joining."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The associated object may be affected by ",(0,t.jsx)(n.a,{href:"../global-filter",children:"global filters"}),", so it should be ignored even if it exists in the database."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["However, the two approaches are completely equivalent ",(0,t.jsx)(n.em,{children:"when all of the following conditions are met"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The foreign key in the join table is real, i.e. there is a corresponding foreign key constraint in the database. See ",(0,t.jsx)(n.a,{href:"../../mapping/base/foreignkey",children:"Real and Fake Foreign Keys"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The associated object is not affected by ",(0,t.jsx)(n.a,{href:"../global-filter",children:"global filters"}),". Note this refers to either of:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../global-filter/user-filter",children:"User-defined filters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../global-filter/logical-deleted",children:"Logical deletion filters"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In this case, the id of the associated object is actually just the foreign key of the current table, so they are equivalent."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"Developers should understand the difference between these two approaches and choose the right one according to the business needs."}),(0,t.jsx)(n.p,{children:"However, when the two approaches are equivalent, optimizing the second approach into the first one is very beneficial - this is called half join elimination."}),(0,t.jsx)(n.p,{children:"The equivalence of the two query methods is a precondition for half join elimination to take effect, so this will not be repeated below."})]}),"\n",(0,t.jsx)(n.h3,{id:"inapplicable-scenarios-1",children:"Inapplicable scenarios"}),"\n",(0,t.jsxs)(n.p,{children:["Half join elimination is only applicable to accessing the ",(0,t.jsx)(n.code,{children:"id"})," property of associated objects, not other properties."]}),"\n",(0,t.jsxs)(n.p,{children:["Here, accessing the ",(0,t.jsx)(n.code,{children:"Autor.firstName"})," property of the associated object is used as an example to demonstrate the inability to eliminate the second join."]}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'BookTable book = Tables.BOOK_TABLE;\n\nList<Long> bookIds = sqlClient  \n    .createQuery(book)\n    .where(\n        book\n            .asTableEx()\n            .authors()\n            .firstName()\n            .eq("Alex") \n    )\n    .select(book.id())\n    .distinct()\n    .execute(); \n'})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val bookIds = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n                .asTableEx()\n                .authors\n                .firstName eq "Alex"\n        )\n        select(table.id)\n    }\n    .distinct() \n    .execute()\n'})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"asTableEx"})," here has no substantial function, it will be introduced in\nthe next doc ",(0,t.jsx)(n.a,{href:"./table-ex",children:"Pagination Safety"}),". Please ignore it for now."]})}),"\n",(0,t.jsx)(n.p,{children:"The generated SQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n    distinct tb_1_.ID\nfrom BOOK as tb_1_  \n/* highlight-start */\ninner join BOOK_AUTHOR_MAPPING as tb_2_\n    on tb_1_.ID = tb_2_.BOOK_ID\ninner join AUTHOR as tb_3_ \n    on tb_2_.AUTHOR_ID = tb_3_.ID \n/* highlight-end */\nwhere tb_3_.FIRST_NAME = ?\n"})}),"\n",(0,t.jsx)(n.p,{children:"We see join tables produce two SQL JOIN clauses:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["First step: Join to intermediate table\n",(0,t.jsx)(n.code,{children:"inner join BOOK_AUTHOR_MAPPING as tb_2_ on tb_1_.ID = tb_2_.BOOK_ID"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Second step: Join to target table\n",(0,t.jsx)(n.code,{children:"inner join AUTHOR as tb_3_ on tb_2_.AUTHOR_ID = tb_3_.ID"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"applicable-scenarios-1",children:"Applicable scenarios"}),"\n",(0,t.jsx)(n.p,{children:"If only the id property of the associated object is accessed, half join elimination can be triggered. For example:"}),"\n",(0,t.jsxs)(o.A,{groupId:"language",children:[(0,t.jsx)(r.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Long> bookIds = sqlClient\n    .createQuery(book)\n    .where(\n        book\n            .asTableEx()\n            .authors()\n            // highlight-next-line\n            .id() // Access id only\n            .eq(2L)\n    )\n    .select(book.id())\n    .distinct()\n    .execute();\n"})})}),(0,t.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val bookIds = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table\n                .asTableEx()\n                .authors\n                // highlight-next-line\n                .id // Access id only\n                eq 2L\n        )\n        select(table.id) \n    }\n    .distinct()\n    .execute() \n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"asTableEx"})," here has no substantial function, it will be introduced in\nthe next doc ",(0,t.jsx)(n.a,{href:"./table-ex",children:"Pagination Safety"}),". Please ignore it for now."]})}),"\n",(0,t.jsx)(n.p,{children:"This time, the generated SQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n    distinct tb_1_.ID\nfrom BOOK as tb_1_   \n/* highlight-start */\ninner join BOOK_AUTHOR_MAPPING as tb_2_\n    on tb_1_.ID = tb_2_.BOOK_ID  \n/* highlight-end */\nwhere tb_2_.AUTHOR_ID = ?\n"})}),"\n",(0,t.jsx)(n.p,{children:"This time we only see one SQL JOIN clause instead of two."}),"\n",(0,t.jsx)(n.p,{children:"The reason: The target table's primary key is actually the foreign key from the intermediate table to the target table."})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}},19365:(e,n,i)=>{i.d(n,{A:()=>a});i(96540);var s=i(18215);const t={tabItem:"tabItem_Ymn6"};var l=i(74848);function a(e){let{children:n,hidden:i,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,a),hidden:i,children:n})}},11470:(e,n,i)=>{i.d(n,{A:()=>k});var s=i(96540),t=i(18215),l=i(23104),a=i(56347),o=i(205),r=i(57485),c=i(31682),d=i(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:i}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:i,attributes:s,default:t}}=e;return{value:n,label:i,attributes:s,default:t}}))}(i);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function b(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function j(e){let{queryString:n=!1,groupId:i}=e;const t=(0,a.W6)(),l=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,r.aZ)(l),(0,s.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(t.location.search);n.set(l,e),t.replace({...t.location,search:n.toString()})}),[l,t])]}function x(e){const{defaultValue:n,queryString:i=!1,groupId:t}=e,l=u(e),[a,r]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=i.find((e=>e.default))??i[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:l}))),[c,h]=j({queryString:i,groupId:t}),[x,p]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,l]=(0,d.Dv)(i);return[t,(0,s.useCallback)((e=>{i&&l.set(e)}),[i,l])]}({groupId:t}),g=(()=>{const e=c??x;return b({value:e,tabValues:l})?e:null})();(0,o.A)((()=>{g&&r(g)}),[g]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!b({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);r(e),h(e),p(e)}),[h,p,l]),tabValues:l}}var p=i(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=i(74848);function f(e){let{className:n,block:i,selectedValue:s,selectValue:a,tabValues:o}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,i=r.indexOf(n),t=o[i].value;t!==s&&(c(n),a(t))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const i=r.indexOf(e.currentTarget)+1;n=r[i]??r[0];break}case"ArrowLeft":{const i=r.indexOf(e.currentTarget)-1;n=r[i]??r[r.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":i},n),children:o.map((e=>{let{value:n,label:i,attributes:l}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>r.push(e),onKeyDown:h,onClick:d,...l,className:(0,t.A)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":s===n}),children:i??n},n)}))})}function y(e){let{lazy:n,children:i,selectedValue:l}=e;const a=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function v(e){const n=x(e);return(0,m.jsxs)("div",{className:(0,t.A)("tabs-container",g.tabList),children:[(0,m.jsx)(f,{...n,...e}),(0,m.jsx)(y,{...n,...e})]})}function k(e){const n=(0,p.A)();return(0,m.jsx)(v,{...e,children:h(e.children)},String(n))}},66971:(e,n,i)=>{i.d(n,{a:()=>x});var s=i(96540),t=i(72774),l=i(63051),a=i(28968),o=i(48875),r=i(44676),c=i(47859),d=i(4671),h=i(99343),u=i(7324),b=i(39781),j=i(74848);const x=(0,s.memo)((e=>{let{open:n,fullScreen:i=!1,title:o,maxWidth:x="md",onClose:g,children:m}=e;const[f,y]=(0,s.useState)(i),v=(0,s.useCallback)((()=>{y((e=>!e))}),[]);return(0,j.jsxs)(l.A,{open:n,onClose:g,fullScreen:f,TransitionComponent:p,maxWidth:x,children:[(0,j.jsx)(t.A,{sx:{position:"relative"},children:(0,j.jsxs)(r.A,{children:[(0,j.jsx)(c.A,{sx:{ml:2,flex:1},variant:"h6",component:"div",children:o}),(0,j.jsx)(d.A,{onClick:v,style:{color:"white"},children:f?(0,j.jsx)(u.A,{}):(0,j.jsx)(h.A,{})}),(0,j.jsx)(d.A,{"aria-label":"close",onClick:g,style:{color:"white"},children:(0,j.jsx)(b.A,{})})]})}),(0,j.jsx)(a.A,{children:m})]})})),p=s.forwardRef((function(e,n){return(0,j.jsx)(o.A,{direction:"up",ref:n,...e})}))},74400:(e,n,i)=>{i.d(n,{l:()=>o});var s=i(96540),t=i(67512),l=i(66971),a=i(74848);const o=(0,s.memo)((e=>{let{buttonText:n,fullScreen:i=!1,title:o=n,variant:r="outlined",large:c=!1,maxWidth:d,useOriginalText:h=!0,children:u}=e;const[b,j]=(0,s.useState)(!1),x=(0,s.useCallback)((e=>{j(!0),e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),[]),p=(0,s.useCallback)((()=>{j(!1)}),[]),g=h?{textTransform:"none"}:{};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.A,{"data-is-view-more-button":"true",onClick:x,variant:r,size:c?"large":"small",style:g,children:n}),(0,a.jsx)(l.a,{open:b,onClose:p,title:o,maxWidth:d,fullScreen:i,children:u})]})}))},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(96540);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);