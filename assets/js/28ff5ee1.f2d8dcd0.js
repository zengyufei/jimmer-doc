"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9285],{82855:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"mutation/update-statement","title":"Update Statement","description":"Basic Usage","source":"@site/docs/mutation/update-statement.mdx","sourceDirName":"mutation","slug":"/mutation/update-statement","permalink":"/jimmer-doc/docs/mutation/update-statement","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mutation/update-statement.mdx","tags":[],"version":"current","lastUpdatedAt":1704100403000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Update Statement"},"sidebar":"tutorialSidebar","previous":{"title":"Modification","permalink":"/jimmer-doc/docs/mutation/"},"next":{"title":"Delete Statement","permalink":"/jimmer-doc/docs/mutation/delete-statement"}}');var l=t(74848),s=t(28453),r=t(11470),i=t(19365);const o={sidebar_position:1,title:"Update Statement"},c=void 0,u={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Using JOIN",id:"using-join",level:2},{value:"MySQL",id:"mysql",level:3},{value:"Postgres",id:"postgres",level:3}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsx)(n.p,{children:"The usage of the update statement is:"}),"\n",(0,l.jsxs)(r.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'AuthorTable author = Tables.AUTHOR_TABLE;\n\nint affectedRowCount = sqlClient\n    .createUpdate(author)\n    .set(\n        author.firstName(),\n        author.firstName().concat("*")  \n    )\n    .where(author.firstName().eq("Dan"))\n    .execute();\nSystem.out.println("Affected row count: " + affectedRowCount);\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val affectedRowCount = sqlClient\n    .createUpdate(Author::class) {\n        set(\n            table.firstName,\n            concat(table.firstName, value("*"))\n        )\n        where(table.firstName eq "Dan")\n    }\n    .execute()\nprintln("Affected row count: $affectedRowCount") \n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"The finally generated SQL is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"update AUTHOR tb_1_  \nset FIRST_NAME = concat(tb_1_.FIRST_NAME, ?)\nwhere tb_1_.FIRST_NAME = ?\n"})}),"\n",(0,l.jsx)(n.h2,{id:"using-join",children:"Using JOIN"}),"\n",(0,l.jsx)(n.p,{children:"By default, update statements do not support joins, which will cause exceptions:"}),"\n",(0,l.jsxs)(r.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'AuthorTableEx author = TableExes.AUTHOR_TABLE_EX;\n\nint affectedRowCount = sqlClient\n    .createUpdate(author)\n    .set(\n        author.firstName(),\n        author.firstName().concat("*")\n    )\n    .where(\n        author\n            // highlight-next-line\n            .books()\n            .name()\n            .eq("Learning GraphQL") \n    )\n    .execute();\nSystem.out.println("Affected row count: " + affectedRowCount);\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val affectedRowCount = sqlClient\n    .createUpdate(Author::class) {\n        set(\n            table.firstName, \n            concat(table.firstName, value("*"))\n        )\n        where(\n            table\n                // highlight-next-line\n                .books\n                .name\n                eq "Learning GraphQL"\n        )\n    }\n    .execute()\nprintln("Affected row count: $affectedRowCount")\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"The exception message is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Table joins for update statement is forbidden by the current dialect, but there is a join `'Author.books'`.\n"})}),"\n",(0,l.jsx)(n.p,{children:"When using MySQL or Postgres, update statements can use JOIN clauses."}),"\n",(0,l.jsx)(n.h3,{id:"mysql",children:"MySQL"}),"\n",(0,l.jsx)(n.p,{children:"First, MySQLDialect needs to be specified when creating SqlClient:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Spring Boot configuration:"}),"\n",(0,l.jsxs)(n.p,{children:["Declare dialect in ",(0,l.jsx)(n.code,{children:"application.yml"})," or ",(0,l.jsx)(n.code,{children:"application.properties"}),", like this"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:'language-title="applicaion.yml"',children:"jimmer:\n    dialect: org.babyfish.jimmer.sql.dialect.MySqlDialect\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Non-Spring Boot configuration:"}),"\n",(0,l.jsxs)(r.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setDialect(\n        new org.babyfish.jimmer.sql.dialect.MySqlDialect()\n    )\n    ...\n    .build();\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val sqlClient = newKSqlClient {\n    setDialect(org.babyfish.jimmer.sql.dialect.MySqlDialect())\n}\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Then JOIN can be used in update:"}),"\n",(0,l.jsxs)(r.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'AuthorTableEx author = TableExes.AUTHOR_TABLE_EX;\n\nint affectedRowCount = sqlClient\n    .createUpdate(author) \n    .set(\n        author.firstName(),\n        author.firstName().concat("*")\n    )\n    .set(\n        author.books().name(),\n        author.books().name().concat("*")  \n    )\n    .set(\n        author.books().store().name(),\n        author.books().store().name().concat("*")\n    )\n    .where(\n        author.books().store().name().eq("MANNING")\n    )\n    .execute();\nSystem.out.println("Affected row count: " + affectedRowCount);\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val affectedRowCount = sqlClient\n    .createUpdate(Author::class) {\n        set(\n            table.firstName,\n            concat(table.firstName, value("*")) \n        )\n        set(\n            table.books.name,\n            concat(table.books.name, value("*"))\n        )\n        set(\n            table.books.store.name, \n            concat(table.books.store.name, value("*"))\n        )\n        where(\n            table.books.store.name eq "MANNING"  \n        )\n    }\n    .execute()\nprintln("Affected row count: $affectedRowCount")\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"The finally generated SQL for MySQL is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"update\n    AUTHOR tb_1_\n    inner join BOOK_AUTHOR_MAPPING as tb_2_\n        on tb_1_.ID = tb_2_.AUTHOR_ID\n    inner join BOOK as tb_3_\n        on tb_2_.BOOK_ID = tb_3_.ID\n    inner join BOOK_STORE as tb_4_\n        on tb_3_.STORE_ID = tb_4_.ID\nset\n    tb_1_.FIRST_NAME = concat(tb_1_.FIRST_NAME, ?),\n    tb_3_.NAME = concat(tb_3_.NAME, ?),\n    tb_4_.NAME = concat(tb_4_.NAME, ?)\nwhere\n    tb_4_.NAME = ? \n"})}),"\n",(0,l.jsx)(n.h3,{id:"postgres",children:"Postgres"}),"\n",(0,l.jsx)(n.p,{children:"First, PostgresDialect needs to be specified when creating SqlClient:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Spring Boot configuration:"}),"\n",(0,l.jsxs)(n.p,{children:["Declare dialect in ",(0,l.jsx)(n.code,{children:"application.yml"})," or ",(0,l.jsx)(n.code,{children:"application.properties"}),", like this"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:'language-title="applicaion.yml"',children:"jimmer:\n    dialect: org.babyfish.jimmer.sql.dialect.PostgresDialect\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Non-Spring Boot configuration:"}),"\n",(0,l.jsxs)(r.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setDialect(\n        new org.babyfish.jimmer.sql.dialect.PostgresDialect()\n    )\n    ...\n    .build();\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val sqlClient = newKSqlClient {\n    setDialect(org.babyfish.jimmer.sql.dialect.PostgresDialect())\n}\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Then JOIN can be used in update:"}),"\n",(0,l.jsxs)(r.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'AuthorTableEx author = TableExes.AUTHOR_TABLE_EX;\n\nint affectedRowCount = sqlClient\n    .createUpdate(author)\n    .set(\n        author.firstName(),\n        author.firstName().concat("*")\n    ) \n    .where(\n        author.books().store().name().eq("MANNING")\n    )\n    .execute();\nSystem.out.println("Affected row count: " + affectedRowCount);\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val affectedRowCount = sqlClient\n    .createUpdate(Author::class) {\n        set(\n            table.firstName,\n            concat(table.firstName, value("*"))\n        )\n        where(\n            table.books.store.name eq "MANNING" \n        )\n    }\n    .execute()\nprintln("Affected row count: $affectedRowCount")\n'})})})]}),"\n",(0,l.jsxs)(n.admonition,{type:"caution",children:[(0,l.jsx)(n.p,{children:"Unlike MySQL, using JOIN in update statements in Postgres has the following restrictions:"}),(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["JOIN can only be used in the ",(0,l.jsx)(n.code,{children:"where"})," clause, not in the ",(0,l.jsx)(n.code,{children:"set"})," clause. That is, Postgres still only allows modifying fields of the current table, supporting joins to other tables only for condition filtering."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The join path can have multiple levels, such as ",(0,l.jsx)(n.code,{children:"author.books().store()"}),", where ",(0,l.jsx)(n.code,{children:"books()"})," is level 1 and ",(0,l.jsx)(n.code,{children:"store()"})," is level 2. The join type of the first level must be ",(0,l.jsx)(n.code,{children:"inner join"}),"."]}),"\n"]}),"\n"]})]}),"\n",(0,l.jsx)(n.p,{children:"The finally generated SQL for Postgres is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"update\n    AUTHOR tb_1_\nset\n    FIRST_NAME = concat(tb_1_.FIRST_NAME, ?)\nfrom BOOK_AUTHOR_MAPPING as tb_2_ \u2776 \ninner join BOOK as tb_3_ \u2777\n    on tb_2_.BOOK_ID = tb_3_.ID\ninner join BOOK_STORE as tb_4_ \u2778\n    on tb_3_.STORE_ID = tb_4_.ID\nwhere\n    tb_1_.ID = tb_2_.AUTHOR_ID \u2779 \nand\n    tb_4_.NAME = ?\n"})}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsxs)(n.p,{children:["The join path ",(0,l.jsx)(n.code,{children:"author.books().store()"})," has two levels, ",(0,l.jsx)(n.code,{children:"books()"})," is level 1 and ",(0,l.jsx)(n.code,{children:"store()"})," is level 2."]}),(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Level 1 ",(0,l.jsx)(n.code,{children:"books()"})," involves two tables:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING"})," table at \u2776, but the join condition is missing here, supplemented at \u2779."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"BOOK"})," table at \u2777."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Level 2 ",(0,l.jsx)(n.code,{children:"store()"})," involves one table:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"BOOK_STORE"})," table at \u2778."]}),"\n"]}),"\n"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["As you can see, in the update statement of Postgres, table joins directly related to the main table cannot use the ",(0,l.jsx)(n.code,{children:"join"})," + ",(0,l.jsx)(n.code,{children:"on"})," syntax, they must be equivalently transformed into ",(0,l.jsx)(n.code,{children:"from"})," + ",(0,l.jsx)(n.code,{children:"where"}),"."]}),(0,l.jsxs)(n.p,{children:["This is why Jimmer requires the join type of level 1 to be ",(0,l.jsx)(n.code,{children:"inner join"})," for update statements in Postgres dialect."]})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(18215);const l={tabItem:"tabItem_Ymn6"};var s=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,r),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(96540),l=t(18215),s=t(23104),r=t(56347),i=t(205),o=t(57485),c=t(31682),u=t(70679);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:l}}=e;return{value:n,label:t,attributes:a,default:l}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const l=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(l.location.search);n.set(s,e),l.replace({...l.location,search:n.toString()})}),[s,l])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:l}=e,s=h(e),[r,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,d]=b({queryString:t,groupId:l}),[m,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,s]=(0,u.Dv)(t);return[l,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:l}),f=(()=>{const e=c??m;return p({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{f&&o(f)}),[f]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),j(e)}),[d,j,s]),tabValues:s}}var j=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function g(e){let{className:n,block:t,selectedValue:a,selectValue:r,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),l=i[t].value;l!==a&&(c(n),r(l))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>o.push(e),onKeyDown:d,onClick:u,...s,className:(0,l.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function _(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,l.A)("tabs-container",f.tabList),children:[(0,x.jsx)(g,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function A(e){const n=(0,j.A)();return(0,x.jsx)(_,{...e,children:d(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(96540);const l={},s=a.createContext(l);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);