"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[5],{35893:(e,n,a)=>{a.d(n,{Ay:()=>d,RM:()=>o});var t=a(74848),r=a(28453),i=a(11470),s=a(19365);const o=[{value:"1. A few properties",id:"1-a-few-properties",level:2},{value:"2. More Properties",id:"2-more-properties",level:2},{value:"3. Include Association",id:"3-include-association",level:2},{value:"4. More Associations (Larger Breadth)",id:"4-more-associations-larger-breadth",level:2},{value:"5. Deeper Associations (Larger Depth)",id:"5-deeper-associations-larger-depth",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"1-a-few-properties",children:"1. A few properties"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Book book = Immutables.createBook(draft -> {\n    draft.setName("Learning GraphQL");\n});\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val book = Book {\n    name = "Learning GraphQL"\n}\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the JSON for the ",(0,t.jsx)(n.code,{children:"books"})," object would be like follows"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"name": "Learning GraphQL"}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"2-more-properties",children:"2. More Properties"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Book book = Immutables.createBook(draft -> {\n    draft.setName("Learning GraphQL");\n    draft.setEdition(1);\n    draft.setPrice(new BigDecimal("49.99"));\n});\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val book = Book {\n    name = "Learning GraphQL"\n    edition = 1\n    price = BigDecimal("49.99")\n}\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the JSON for the ",(0,t.jsx)(n.code,{children:"books"})," object would be like follows"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Learning GraphQL",\n    "edition": 1,\n    "price": 49.99\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"3-include-association",children:"3. Include Association"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Book book = Immutables.createBook(draft -> {\n    draft.setName("Learning GraphQL");\n    draft.setEdition(1);\n    draft.setPrice(new BigDecimal("49.99"));\n    draft.applyStore(store -> {\n        store.setName("O\'REILLY");\n        store.setWebsite("https://www.oreilly.com/");\n    });\n});\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val book = Book {\n    name = "Learning GraphQL"\n    edition = 1\n    price = BigDecimal("49.99")\n    store {\n        name = "O\'REILLY"\n        website = "https://www.oreilly.com/"\n    }\n}\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the JSON for the ",(0,t.jsx)(n.code,{children:"books"})," object would be like follows"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Learning GraphQL",\n    "edition": 1,\n    "price": 49.99,\n    "store": {\n        "name": "O\'REILLY",\n        "website": "https://www.oreilly.com/"\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"4-more-associations-larger-breadth",children:"4. More Associations (Larger Breadth)"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Book book = Immutables.createBook(draft -> {\n    draft.setName("Learning GraphQL");\n    draft.setEdition(1);\n    draft.setPrice(new BigDecimal("49.99"));\n    draft.applyStore(store -> {\n        store.setName("O\'REILLY");\n        store.setWebsite("https://www.oreilly.com/");\n    });\n    draft.addIntoAuthors(author -> { \n        author.setFirstName("Eve");\n        author.setLastName("Procello");\n        author.setGender(Gender.FEMALE);\n    });\n    draft.addIntoAuthors(author -> { \n        author.setFirstName("Alex");\n        author.setLastName("Banks");\n        author.setGender(Gender.MALE);\n    });\n});\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val book = Book {\n    name = "Learning GraphQL"\n    edition = 1\n    price = BigDecimal("49.99")\n    store {\n        name = "O\'REILLY"\n        website = "https://www.oreilly.com/"\n    }\n    authors().addBy {\n        firstName = "Eve"\n        setLastName = "Procello"\n        gender = Gender.FEMALE\n    }\n    authors().addBy {\n        firstName = "Alex"\n        lastName = "Banks"\n        gender = Gender.MALE\n    }\n}\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the JSON for the ",(0,t.jsx)(n.code,{children:"books"})," object would be like follows"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Learning GraphQL",\n    "edition": 1,\n    "price": 49.99,\n    "store": {\n        "name": "O\'REILLY",\n        "website": "https://www.oreilly.com/"\n    },\n    "authors": [\n        {\n            "firstName": "Eve",\n            "lastName": "Procello",\n            "gender:" "FEMALE"\n        },\n        {\n            "firstName": "Alex",\n            "lastName": "Banks",\n            "gender:" "MALE"\n        }\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-deeper-associations-larger-depth",children:"5. Deeper Associations (Larger Depth)"}),"\n",(0,t.jsx)(n.p,{children:"Here is the translation to English:"}),"\n",(0,t.jsxs)(n.p,{children:["Unlike the previous examples, here we choose ",(0,t.jsx)(n.code,{children:"BookStore"})," as the aggregate root for the data structure, rather than ",(0,t.jsx)(n.code,{children:"Book"}),"."]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'BookStore store = Immutables.createBookStore(draft -> {\n    draft.setName("O\'REILLY");\n    draft.setWebsite("https://www.oreilly.com/");\n    draft.addIntoBooks(book -> {\n        book.setName("Learning GraphQL");\n        book.setEdition(1);\n        book.setPrice(new BigDecimal("49.99"));\n        book.addIntoAuthors(author -> { \n            author.setFirstName("Eve");\n            author.setLastName("Procello");\n            author.setGender(Gender.FEMALE);\n        });\n        book.addIntoAuthors(author -> { \n            author.setFirstName("Alex");\n            author.setLastName("Banks");\n            author.setGender(Gender.MALE);\n        });\n    });\n});\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val store = BookStore {\n    name = "O\'REILLY"\n    website = "https://www.oreilly.com/"\n    books().addBy {\n        name = "Learning GraphQL"\n        edition = 1\n        price = BigDecimal("49.99")\n        authors().addBy {\n            firstName = "Eve"\n            setLastName = "Procello"\n            gender = Gender.FEMALE\n        }\n        authors().addBy {\n            firstName = "Alex"\n            lastName = "Banks"\n            gender = Gender.MALE\n        }\n    }\n}\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the JSON for the ",(0,t.jsx)(n.code,{children:"store"})," object would be like follows"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "O\'REILLY",\n    "website": "https://www.oreilly.com/",\n    "books": [\n        {\n            "name": "Learning GraphQL",\n            "edition": 1,\n            "price": 49.99,\n            "authors": [\n                {\n                    "firstName": "Eve",\n                    "lastName": "Procello",\n                    "gender:" "FEMALE"\n                },\n                {\n                    "firstName": "Alex",\n                    "lastName": "Banks",\n                    "gender:" "MALE"\n                }\n            ]\n        }\n    ]\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},76752:(e,n,a)=>{a.d(n,{Ay:()=>l,RM:()=>s});var t=a(74848),r=a(28453),i=(a(11470),a(19365),a(45575));const s=[...i.RM];function o(e){const n={a:"a",em:"em",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:['In order to solve the inconvenience of secondary "modification" ',(0,t.jsx)(n.em,{children:"(creating a new immutable object based on another immutable object)"})," of complex immutable objects in the current JVM ecosystem, some immutable object frameworks were born:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://immutables.github.io/immutable.html",children:"Immutables"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/inferred/FreeBuilder",children:"FreeBuilder"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://arrow-kt.io/learn/immutable-data/intro/",children:"Arrow-Kt(Kotlin)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://kopyk.at/",children:"Kopyk(Kotlin)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/PatilShreyas/mutekt",children:"MuteKt(Kotlin)"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Jimmer is an ORM framework, and handling deep data structures is a core issue for ORM, so Jimmer must do similar work."}),"\n",(0,t.jsxs)(n.p,{children:["Jimmer needs to provide elegant dual language support for both Java and Kotlin at the same time. None of the above solutions can meet this requirement, so Jimmer did not use any of them, but chose to transplant ",(0,t.jsx)(n.a,{href:"https://github.com/immerjs/immer",children:"immer"})," from the JavaScript/TypeScript field."]}),"\n",(0,t.jsx)(i.Ay,{}),"\n",(0,t.jsx)(n.p,{children:"This transplant is a powerful complement to the JVM ecosystem."}),"\n",(0,t.jsxs)(n.p,{children:["This framework is named Jimmer, paying tribute to ",(0,t.jsx)(n.a,{href:"https://github.com/immerjs/immer",children:"immer"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},45575:(e,n,a)=>{a.d(n,{Ay:()=>d,RM:()=>o});var t=a(74848),r=a(28453),i=a(11470),s=a(19365);const o=[{value:"1. Define immutable type",id:"1-define-immutable-type",level:2},{value:"2. Create data structure from scratch",id:"2-create-data-structure-from-scratch",level:2},{value:"3. Create new data based on existing data",id:"3-create-new-data-based-on-existing-data",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Next, we will demonstrate the power of immutable objects transplanted from ",(0,t.jsx)(n.a,{href:"https://github.com/immerjs/immer",children:"immer"})," in three steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Define immutable types"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create an immutable data structure from scratch"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Based on an existing data structure, create a new data structure according to some desired modifications."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This last step is where the core value of ",(0,t.jsx)(n.a,{href:"https://github.com/immerjs/immer",children:"immer"})," lies. Please pay close attention."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"1-define-immutable-type",children:"1. Define immutable type"}),"\n",(0,t.jsxs)(n.p,{children:["To demonstrate this feature, there is no need for the ",(0,t.jsx)(n.code,{children:"@Entity"})," annotation on ORM entities, the non-ORM ",(0,t.jsx)(n.code,{children:"@Immutable"})," is sufficient."]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TreeNode.java"',children:"package yourpackage;\n\nimport java.util.List;\nimport org.babyfish.jimmer.Immutable;\n\n@Immutable \npublic interface TreeNode {\n    \n    String name();\n\n    List<TreeNode> childNodes();\n}\n"})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",metastring:'title="TreeNode.kt"',children:"package yourpackage\n\nimport org.babyfish.jimmer.Immutable\n\n@Immutable\ninterface TreeNode {\n\n    val name: String\n\n    val childNodes: List<TreeNode>\n}\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"2-create-data-structure-from-scratch",children:"2. Create data structure from scratch"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'TreeNode treeNode = Immutables.createTreeNode(root -> {\n    root.setName("Root").addIntoChildNodes(food -> {\n        food\n            .setName("Food")\n            .addIntoChildNodes(drink -> {\n                drink\n                    .setName("Drink")\n                    .addIntoChildNodes(cococola -> {\n                        cococola.setName("Cococola");\n                    })\n                    .addIntoChildNodes(fanta -> {\n                        fanta.setName("Fanta");\n                    });\n                ;\n            });\n        ;\n    });\n});\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val treeNode = TreeNode {\n    name = "Root"\n    childNodes().addBy {\n        name = "Food"\n        childNodes().addBy {\n            name = "Drinks"\n            childNodes().addBy {\n                name = "Cococola"\n            }\n            childNodes().addBy {\n                name = "Fanta"\n            }\n        }\n    }\n}\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"3-create-new-data-based-on-existing-data",children:"3. Create new data based on existing data"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'TreeNode newTreeNode = Immutables.createTreeNode(\n        // highlight-next-line\n        treeNode, // existing data\n        root -> {\n            root\n                .childNodes(false).get(0) // Food\n                .childNodes(false).get(0) // Drink\n                .childNodes(false).get(0) // Cococola\n                .setName("Cococola plus");\n        }\n);\n\n// Show that `newTreeNode` reflects the developer\'s desired modifications\n// Note that this does not affect the existing `treeNode` at all\n\nSystem.out.println("treeNode:" + treeNode);\nSystem.out.println("newTreeNode:" + newTreeNode);\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'/*\n * val newTreeNode = treeNode.copy {\n *     ...\n * }\n *\n * is actually shorthand for \n * \n * val newTreeNode = TreeNode(treeNode) {\n *     ...\n * }\n */\nval newTreeNode = treeNode.copy {\n    childNodes()[0] // Food\n        .childNodes()[0] // Drinks\n        .childNodes()[0] // Cococola\n        .name += " plus"\n}\n\n// Show that `newTreeNode` reflects the developer\'s desired modifications\n// Note that this does not affect the existing `treeNode` at all\n\nprintln("treeNode: $treeNode")\nprintln("newTreeNode: $newTreeNode")\n'})})})]}),"\n",(0,t.jsx)(n.p,{children:"Output (the actual printed output is compact, but is formatted here for readability)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'treeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Coco Cola"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\nnewTreeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Coco Cola plus"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see, ",(0,t.jsx)(n.code,{children:"treeNode"})," is unaffected, and ",(0,t.jsx)(n.code,{children:"newTreeNode"})," reflects the user's desired modifications."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},90053:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>j,frontMatter:()=>h,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"mapping/base/basic","title":"Simple Mapping","description":"@Entity","source":"@site/docs/mapping/base/basic.mdx","sourceDirName":"mapping/base","slug":"/mapping/base/basic","permalink":"/jimmer-doc/docs/mapping/base/basic","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mapping/base/basic.mdx","tags":[],"version":"current","lastUpdatedAt":1712768787000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Simple Mapping"},"sidebar":"tutorialSidebar","previous":{"title":"Nullity","permalink":"/jimmer-doc/docs/mapping/base/nullity"},"next":{"title":"Association Mapping","permalink":"/jimmer-doc/docs/mapping/base/association/"}}');var r=a(74848),i=a(28453),s=a(35893),o=a(76752),l=a(74400),d=a(11470),c=a(19365);const h={sidebar_position:2,title:"Simple Mapping"},u=void 0,m={},p=[{value:"@Entity",id:"entity",level:2},{value:"@Table",id:"table",level:2},{value:"@Column",id:"column",level:2},{value:"@Id",id:"id",level:2},{value:"@GeneratedValue",id:"generatedvalue",level:2},{value:"Database autoincrement",id:"database-autoincrement",level:3},{value:"Database sequence",id:"database-sequence",level:3},{value:"UUID",id:"uuid",level:3},{value:"Custom IdGenerator",id:"custom-idgenerator",level:3}];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"entity",children:"@Entity"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"@Entity"})," annotation is used to decorate immutable interfaces to represent ORM entities."]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java"  ',children:"// highlight-next-line\n@Entity\npublic interface Book {\n    ...Omit other code...\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"// highlight-next-line \n@Entity\ninterface Book {\n    ...Omit other code...\n}\n"})})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"Why are entity types interfaces instead of classes?"}),(0,r.jsxs)(n.p,{children:["Jimmer entities have ",(0,r.jsx)(l.l,{buttonText:"dynamic shapes",children:(0,r.jsx)(s.Ay,{})})," and ",(0,r.jsx)(l.l,{buttonText:"immutability",children:(0,r.jsx)(o.Ay,{})}),",\nwhich are not simple POJOs with intricate internal workings that cannot be accomplished manually or with lombok assistance."]}),(0,r.jsxs)(n.p,{children:["So Jimmer lets developers write interfaces that are implemented at compile time by preprocessors ",(0,r.jsx)(n.em,{children:"(AnnotationProcessor for Java, KSP for Kotlin)"}),"."]})]}),"\n",(0,r.jsx)(n.h2,{id:"table",children:"@Table"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"@Table"})," annotation specifies the table name for the entity. If ",(0,r.jsx)(n.code,{children:"@Table"})," annotation is not used, e.g."]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="BookStore.java" ',children:"@Entity\npublic interface BookStore {\n    ...Omit other code... \n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookStore.kt"',children:"@Entity\ninterface BookStore {\n    ...Omit other code...\n} \n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Jimmer will deduce the table name corresponding to the ",(0,r.jsx)(n.code,{children:"BookStore"})," interface based on the ",(0,r.jsx)(n.a,{href:"./naming-strategy",children:"naming strategy"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If the default ",(0,r.jsx)(n.a,{href:"./naming-strategy",children:"naming strategy"})," is not overridden by the user, the table name for interface ",(0,r.jsx)(n.code,{children:"BookStore"})," is ",(0,r.jsx)(n.code,{children:"BOOK_STORE"}),". So the previous code is equivalent to:"]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="BookStore.java"',children:'@Entity\n// highlight-next-line  \n@Table(name = "BOOK_STORE")\npublic interface BookStore {\n    ...Omit other code...\n}\n'})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookStore.kt"  ',children:'@Entity\n// highlight-next-line\n@Table(name = "BOOK_STORE") \ninterface BookStore {\n    ...Omit other code...\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"column",children:"@Column"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"@Column"})," annotation specifies the database column for ordinary non-associative properties. If ",(0,r.jsx)(n.code,{children:"@Column"})," annotation is not used, e.g."]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Author.java"',children:"@Entity \npublic interface BookStore {\n\n    String firstName();\n\n    ...Omit other code...\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Author.kt"',children:"@Entity\ninterface Author {\n\n    val firstName: String\n\n    ...Omit other code...\n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Jimmer will deduce the column name corresponding to the ",(0,r.jsx)(n.code,{children:"firstName"})," property based on the ",(0,r.jsx)(n.a,{href:"./naming-strategy",children:"naming strategy"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If the default ",(0,r.jsx)(n.a,{href:"./naming-strategy",children:"naming strategy"})," is not overridden by the user, the column name for property ",(0,r.jsx)(n.code,{children:"firstName"})," is ",(0,r.jsx)(n.code,{children:"FIRST_NAME"}),". So the previous code is equivalent to:"]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Author.java"',children:'@Entity\npublic interface BookStore {\n\n    // highlight-next-line\n    @Column(name = "FIRST_NAME") \n    String firstName();\n\n    ...Omit other code...\n}\n'})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Author.kt"',children:'@Entity \ninterface Author {\n\n    // highlight-next-line\n    @Column(name = "FIRST_NAME")\n    val firstName: String\n\n    ...Omit other code...\n}\n'})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@Column"})," is only used to explicitly specify column names for non-associative properties. For foreign key column names of many-to-one or one-to-one association properties, they must be specified through ",(0,r.jsx)(n.code,{children:"@JoinColumn"}),". See ",(0,r.jsx)(n.a,{href:"./association",children:"Association Mapping"})," for more."]})}),"\n",(0,r.jsx)(n.h2,{id:"id",children:"@Id"}),"\n",(0,r.jsx)(n.p,{children:"Declare a property as the id property, as follows"}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java" ',children:"@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @Id  \n    long id();\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"@Entity\ninterface Book {\n\n    // highlight-next-line\n    @Id\n    val id: Long\n}\n"})})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsxs)(n.p,{children:["The id field must be non-null ",(0,r.jsxs)(n.em,{children:["(for Java, ",(0,r.jsx)(n.code,{children:"long"})," is used here instead of ",(0,r.jsx)(n.code,{children:"Long"}),")"]})]}),(0,r.jsx)(n.p,{children:"Unlike JPA, which encourages declaring the id as a nullable type, Jimmer does not use this method to express not specifying the id during data insertion. The dynamism of Jimmer objects themselves can easily express this problem."}),(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"./nullity",children:"Nullity"})," for details."]})]}),"\n",(0,r.jsx)(n.h2,{id:"generatedvalue",children:"@GeneratedValue"}),"\n",(0,r.jsxs)(n.p,{children:["In the previous example, the primary key property decorated with ",(0,r.jsx)(n.code,{children:"@Id"})," is a business field that must be specified when inserting data."]}),"\n",(0,r.jsx)(n.p,{children:"However, more often, we expect that the primary key property itself has no business meaning, so that it can be unspecified when inserting data and automatically generated instead. The automatic id generation strategies are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Database autoincrement"}),"\n",(0,r.jsx)(n.li,{children:"Database sequence"}),"\n",(0,r.jsx)(n.li,{children:"UUID"}),"\n",(0,r.jsx)(n.li,{children:"Snowflake ID"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@GeneratedValue"})," works with ",(0,r.jsx)(n.code,{children:"@Id"})," to specify auto growth strategy for Id."]}),"\n",(0,r.jsx)(n.h3,{id:"database-autoincrement",children:"Database autoincrement"}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java"',children:"@Entity\npublic interface Book {\n\n    @Id  \n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    long id();\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY) \n    val id: Long\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"database-sequence",children:"Database sequence"}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java" ',children:"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)  \n    long id();\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"@Entity \ninterface Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    val id: Long \n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Here, the sequence name in the database is not specified through the ",(0,r.jsx)(n.code,{children:"sequenceName"})," of ",(0,r.jsx)(n.code,{children:"@GeneratorValue"}),". Jimmer will deduce the sequence name based on the ",(0,r.jsx)(n.a,{href:"./naming-strategy",children:"naming strategy"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If the default ",(0,r.jsx)(n.a,{href:"./naming-strategy",children:"naming strategy"})," is not overridden by the user, the sequence name here is ",(0,r.jsx)(n.code,{children:"BOOK_ID_SEQ"}),". So the previous code is equivalent to:"]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java"',children:'@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(\n        strategy = GenerationType.SEQUENCE,\n        // highlight-next-line\n        sequenceName = "BOOK_ID_SEQ" \n    )\n    long id();\n}\n'})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:'@Entity  \ninterface Book {\n\n    @Id\n    @GeneratedValue(\n        strategy = GenerationType.SEQUENCE,\n        // highlight-next-line\n        sequenceName = "BOOK_ID_SEQ"\n    )\n    val id: Long\n}\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"uuid",children:"UUID"}),"\n",(0,r.jsxs)(n.p,{children:["Setting the generatorType property of ",(0,r.jsx)(n.code,{children:"@GeneratedValue"})," to ",(0,r.jsx)(n.code,{children:"org.babyfish.jimmer.sql.meta.UUIDIdGenerator"})," can be used to randomly generate UUIDs"]}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java"',children:"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(generatorType = UUIDIdGenerator.class) \n    UUID id();\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"@Entity\ninterface Book {\n\n    @Id\n    @GeneratedValue(generatorType = UUIDIdGenerator::class)\n    val id: UUID\n} \n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"custom-idgenerator",children:"Custom IdGenerator"}),"\n",(0,r.jsx)(n.p,{children:"When the above Id growth strategies cannot meet the requirements, a custom Id generation strategy can be defined."}),"\n",(0,r.jsxs)(n.p,{children:["Jimmer provides an ",(0,r.jsx)(n.code,{children:"UserIdGenerator<T>"})," interface"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="UserIdGenerator.java"',children:"package org.babyfish.jimmer.sql.meta;\n\npublic interface UserIdGenerator<T> extends IdGenerator {\n\n    T generate(Class<?> entityType); \n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Users can implement this interface to implement any Id generation algorithm, including snowflake ID."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MyGenerator.java"  ',children:"package com.mycompany.myproject.common;\n\npublic class MyIdGenerator implements UserIdGenerator<Long> {\n\n    @Override\n    public Long generate(Class<?> entityType) {\n        return ...Omit custom id generation logic...\n    }\n}\n"})}),"\n",(0,r.jsxs)(d.A,{groupId:"language",children:[(0,r.jsx)(c.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Book.java"',children:"@Entity\npublic interface Book {\n\n    @Id\n    @GeneratedValue(generateType = MyIdGenerator.class)\n    Long id();\n}\n"})})}),(0,r.jsx)(c.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:'title="Book.kt"',children:"@Entity\ninterface Book {\n\n    @Id \n    @GeneratedValue(generateType = MyIdGenerator::class)\n    val id: Long  \n}\n"})})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsxs)(n.p,{children:["The user-implemented Id generation class ",(0,r.jsx)(n.code,{children:"MyIdGenerator"})," itself does not have generic parameters, but generic parameters must be specified for the super interface ",(0,r.jsx)(n.code,{children:"UserIdGenerator"}),"."]}),(0,r.jsx)(n.p,{children:"The type of the decorated Id property must be consistent with this generic parameter, otherwise an exception will be thrown."})]})]})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},19365:(e,n,a)=>{a.d(n,{A:()=>s});a(96540);var t=a(18215);const r={tabItem:"tabItem_Ymn6"};var i=a(74848);function s(e){let{children:n,hidden:a,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,s),hidden:a,children:n})}},11470:(e,n,a)=>{a.d(n,{A:()=>k});var t=a(96540),r=a(18215),i=a(23104),s=a(56347),o=a(205),l=a(57485),d=a(31682),c=a(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}(a);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function m(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:a}=e;const r=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function g(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,i=u(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,h]=p({queryString:a,groupId:r}),[g,j]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Dv)(a);return[r,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:r}),x=(()=>{const e=d??g;return m({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{x&&l(x)}),[x]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=a(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=a(74848);function f(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,a=l.indexOf(n),r=o[a].value;r!==t&&(d(n),s(r))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},n),children:o.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:h,onClick:c,...i,className:(0,r.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function v(e){let{lazy:n,children:a,selectedValue:i}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(v,{...n,...e})]})}function k(e){const n=(0,j.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},66971:(e,n,a)=>{a.d(n,{a:()=>g});var t=a(96540),r=a(72774),i=a(63051),s=a(28968),o=a(48875),l=a(44676),d=a(47859),c=a(4671),h=a(99343),u=a(7324),m=a(39781),p=a(74848);const g=(0,t.memo)((e=>{let{open:n,fullScreen:a=!1,title:o,maxWidth:g="md",onClose:x,children:b}=e;const[f,v]=(0,t.useState)(a),y=(0,t.useCallback)((()=>{v((e=>!e))}),[]);return(0,p.jsxs)(i.A,{open:n,onClose:x,fullScreen:f,TransitionComponent:j,maxWidth:g,children:[(0,p.jsx)(r.A,{sx:{position:"relative"},children:(0,p.jsxs)(l.A,{children:[(0,p.jsx)(d.A,{sx:{ml:2,flex:1},variant:"h6",component:"div",children:o}),(0,p.jsx)(c.A,{onClick:y,style:{color:"white"},children:f?(0,p.jsx)(u.A,{}):(0,p.jsx)(h.A,{})}),(0,p.jsx)(c.A,{"aria-label":"close",onClick:x,style:{color:"white"},children:(0,p.jsx)(m.A,{})})]})}),(0,p.jsx)(s.A,{children:b})]})})),j=t.forwardRef((function(e,n){return(0,p.jsx)(o.A,{direction:"up",ref:n,...e})}))},74400:(e,n,a)=>{a.d(n,{l:()=>o});var t=a(96540),r=a(67512),i=a(66971),s=a(74848);const o=(0,t.memo)((e=>{let{buttonText:n,fullScreen:a=!1,title:o=n,variant:l="outlined",large:d=!1,maxWidth:c,useOriginalText:h=!0,children:u}=e;const[m,p]=(0,t.useState)(!1),g=(0,t.useCallback)((e=>{p(!0),e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),[]),j=(0,t.useCallback)((()=>{p(!1)}),[]),x=h?{textTransform:"none"}:{};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.A,{"data-is-view-more-button":"true",onClick:g,variant:l,size:d?"large":"small",style:x,children:n}),(0,s.jsx)(i.a,{open:m,onClose:j,title:o,maxWidth:c,fullScreen:a,children:u})]})}))},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(96540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);